
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000302c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800315c  0800315c  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  0800315c  0800315c  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800315c  0800315c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08003164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000034  08003198  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003198  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f0a  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177b  00000000  00000000  00028f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001652d  00000000  00000000  0002bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a195  00000000  00000000  00041fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008276a  00000000  00000000  0004c172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce8dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d4  00000000  00000000  000ce930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08003120 	.word	0x08003120

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08003120 	.word	0x08003120

0800014c <fsm_for_input_processing_0>:
enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND} ;
enum ButtonState buttonState0 = BUTTON_RELEASED;
enum ButtonState buttonState1 = BUTTON_RELEASED;
enum ButtonState buttonState2 = BUTTON_RELEASED;
int init = 1;
void fsm_for_input_processing_0(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(buttonState0){
 8000150:	4b22      	ldr	r3, [pc, #136]	; (80001dc <fsm_for_input_processing_0+0x90>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b02      	cmp	r3, #2
 8000156:	d02f      	beq.n	80001b8 <fsm_for_input_processing_0+0x6c>
 8000158:	2b02      	cmp	r3, #2
 800015a:	dc3c      	bgt.n	80001d6 <fsm_for_input_processing_0+0x8a>
 800015c:	2b00      	cmp	r3, #0
 800015e:	d002      	beq.n	8000166 <fsm_for_input_processing_0+0x1a>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d015      	beq.n	8000190 <fsm_for_input_processing_0+0x44>
			buttonState0 = BUTTON_RELEASED;
		}
		//todo
		break;
	}
}
 8000164:	e037      	b.n	80001d6 <fsm_for_input_processing_0+0x8a>
		if(is_button_pressed(0)){
 8000166:	2000      	movs	r0, #0
 8000168:	f000 f94a 	bl	8000400 <is_button_pressed>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d02c      	beq.n	80001cc <fsm_for_input_processing_0+0x80>
			buttonState0 = BUTTON_PRESSED;
 8000172:	4b1a      	ldr	r3, [pc, #104]	; (80001dc <fsm_for_input_processing_0+0x90>)
 8000174:	2201      	movs	r2, #1
 8000176:	701a      	strb	r2, [r3, #0]
			if(init == 1)
 8000178:	4b19      	ldr	r3, [pc, #100]	; (80001e0 <fsm_for_input_processing_0+0x94>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d103      	bne.n	8000188 <fsm_for_input_processing_0+0x3c>
				init = 0;
 8000180:	4b17      	ldr	r3, [pc, #92]	; (80001e0 <fsm_for_input_processing_0+0x94>)
 8000182:	2200      	movs	r2, #0
 8000184:	601a      	str	r2, [r3, #0]
		break;
 8000186:	e021      	b.n	80001cc <fsm_for_input_processing_0+0x80>
				changing_mode_flag = 1;
 8000188:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <fsm_for_input_processing_0+0x98>)
 800018a:	2201      	movs	r2, #1
 800018c:	701a      	strb	r2, [r3, #0]
		break;
 800018e:	e01d      	b.n	80001cc <fsm_for_input_processing_0+0x80>
		if(!is_button_pressed(0)){
 8000190:	2000      	movs	r0, #0
 8000192:	f000 f935 	bl	8000400 <is_button_pressed>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d103      	bne.n	80001a4 <fsm_for_input_processing_0+0x58>
			buttonState0 = BUTTON_RELEASED;
 800019c:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <fsm_for_input_processing_0+0x90>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]
		break;
 80001a2:	e015      	b.n	80001d0 <fsm_for_input_processing_0+0x84>
			if(is_button_pressed_1s(0)){
 80001a4:	2000      	movs	r0, #0
 80001a6:	f000 f945 	bl	8000434 <is_button_pressed_1s>
 80001aa:	4603      	mov	r3, r0
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d00f      	beq.n	80001d0 <fsm_for_input_processing_0+0x84>
				buttonState0 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80001b0:	4b0a      	ldr	r3, [pc, #40]	; (80001dc <fsm_for_input_processing_0+0x90>)
 80001b2:	2202      	movs	r2, #2
 80001b4:	701a      	strb	r2, [r3, #0]
		break;
 80001b6:	e00b      	b.n	80001d0 <fsm_for_input_processing_0+0x84>
		if(!is_button_pressed(0)){
 80001b8:	2000      	movs	r0, #0
 80001ba:	f000 f921 	bl	8000400 <is_button_pressed>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d107      	bne.n	80001d4 <fsm_for_input_processing_0+0x88>
			buttonState0 = BUTTON_RELEASED;
 80001c4:	4b05      	ldr	r3, [pc, #20]	; (80001dc <fsm_for_input_processing_0+0x90>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	701a      	strb	r2, [r3, #0]
		break;
 80001ca:	e003      	b.n	80001d4 <fsm_for_input_processing_0+0x88>
		break;
 80001cc:	bf00      	nop
 80001ce:	e002      	b.n	80001d6 <fsm_for_input_processing_0+0x8a>
		break;
 80001d0:	bf00      	nop
 80001d2:	e000      	b.n	80001d6 <fsm_for_input_processing_0+0x8a>
		break;
 80001d4:	bf00      	nop
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000066 	.word	0x20000066
 80001e0:	20000000 	.word	0x20000000
 80001e4:	20000071 	.word	0x20000071

080001e8 <fsm_for_input_processing_1>:

void fsm_for_input_processing_1(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	switch(buttonState1){
 80001ec:	4b1e      	ldr	r3, [pc, #120]	; (8000268 <fsm_for_input_processing_1+0x80>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	d027      	beq.n	8000244 <fsm_for_input_processing_1+0x5c>
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	dc34      	bgt.n	8000262 <fsm_for_input_processing_1+0x7a>
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d002      	beq.n	8000202 <fsm_for_input_processing_1+0x1a>
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d00d      	beq.n	800021c <fsm_for_input_processing_1+0x34>
		if(!is_button_pressed(1)){
			buttonState1 = BUTTON_RELEASED;
		}
		break;
	}
}
 8000200:	e02f      	b.n	8000262 <fsm_for_input_processing_1+0x7a>
		if(is_button_pressed(1)){
 8000202:	2001      	movs	r0, #1
 8000204:	f000 f8fc 	bl	8000400 <is_button_pressed>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d024      	beq.n	8000258 <fsm_for_input_processing_1+0x70>
			buttonState1 = BUTTON_PRESSED;
 800020e:	4b16      	ldr	r3, [pc, #88]	; (8000268 <fsm_for_input_processing_1+0x80>)
 8000210:	2201      	movs	r2, #1
 8000212:	701a      	strb	r2, [r3, #0]
			increment_value_flag = 1;
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <fsm_for_input_processing_1+0x84>)
 8000216:	2201      	movs	r2, #1
 8000218:	701a      	strb	r2, [r3, #0]
		break;
 800021a:	e01d      	b.n	8000258 <fsm_for_input_processing_1+0x70>
		if(!is_button_pressed(1)){
 800021c:	2001      	movs	r0, #1
 800021e:	f000 f8ef 	bl	8000400 <is_button_pressed>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d103      	bne.n	8000230 <fsm_for_input_processing_1+0x48>
			buttonState1 = BUTTON_RELEASED;
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <fsm_for_input_processing_1+0x80>)
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
		break;
 800022e:	e015      	b.n	800025c <fsm_for_input_processing_1+0x74>
			if(is_button_pressed_1s(1)){
 8000230:	2001      	movs	r0, #1
 8000232:	f000 f8ff 	bl	8000434 <is_button_pressed_1s>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d00f      	beq.n	800025c <fsm_for_input_processing_1+0x74>
				buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <fsm_for_input_processing_1+0x80>)
 800023e:	2202      	movs	r2, #2
 8000240:	701a      	strb	r2, [r3, #0]
		break;
 8000242:	e00b      	b.n	800025c <fsm_for_input_processing_1+0x74>
		if(!is_button_pressed(1)){
 8000244:	2001      	movs	r0, #1
 8000246:	f000 f8db 	bl	8000400 <is_button_pressed>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d107      	bne.n	8000260 <fsm_for_input_processing_1+0x78>
			buttonState1 = BUTTON_RELEASED;
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <fsm_for_input_processing_1+0x80>)
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
		break;
 8000256:	e003      	b.n	8000260 <fsm_for_input_processing_1+0x78>
		break;
 8000258:	bf00      	nop
 800025a:	e002      	b.n	8000262 <fsm_for_input_processing_1+0x7a>
		break;
 800025c:	bf00      	nop
 800025e:	e000      	b.n	8000262 <fsm_for_input_processing_1+0x7a>
		break;
 8000260:	bf00      	nop
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000067 	.word	0x20000067
 800026c:	20000073 	.word	0x20000073

08000270 <fsm_for_input_processing_2>:

void fsm_for_input_processing_2(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	switch(buttonState2){
 8000274:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <fsm_for_input_processing_2+0x80>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b02      	cmp	r3, #2
 800027a:	d027      	beq.n	80002cc <fsm_for_input_processing_2+0x5c>
 800027c:	2b02      	cmp	r3, #2
 800027e:	dc34      	bgt.n	80002ea <fsm_for_input_processing_2+0x7a>
 8000280:	2b00      	cmp	r3, #0
 8000282:	d002      	beq.n	800028a <fsm_for_input_processing_2+0x1a>
 8000284:	2b01      	cmp	r3, #1
 8000286:	d00d      	beq.n	80002a4 <fsm_for_input_processing_2+0x34>
			buttonState2 = BUTTON_RELEASED;
		}
		//todo
		break;
	}
}
 8000288:	e02f      	b.n	80002ea <fsm_for_input_processing_2+0x7a>
		if(is_button_pressed(2)){
 800028a:	2002      	movs	r0, #2
 800028c:	f000 f8b8 	bl	8000400 <is_button_pressed>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d024      	beq.n	80002e0 <fsm_for_input_processing_2+0x70>
			buttonState2 = BUTTON_PRESSED;
 8000296:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <fsm_for_input_processing_2+0x80>)
 8000298:	2201      	movs	r2, #1
 800029a:	701a      	strb	r2, [r3, #0]
			value_chosen_flag = 1;
 800029c:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <fsm_for_input_processing_2+0x84>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
		break;
 80002a2:	e01d      	b.n	80002e0 <fsm_for_input_processing_2+0x70>
		if(!is_button_pressed(2)){
 80002a4:	2002      	movs	r0, #2
 80002a6:	f000 f8ab 	bl	8000400 <is_button_pressed>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d103      	bne.n	80002b8 <fsm_for_input_processing_2+0x48>
			buttonState2 = BUTTON_RELEASED;
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <fsm_for_input_processing_2+0x80>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
		break;
 80002b6:	e015      	b.n	80002e4 <fsm_for_input_processing_2+0x74>
			if(is_button_pressed_1s(2)){
 80002b8:	2002      	movs	r0, #2
 80002ba:	f000 f8bb 	bl	8000434 <is_button_pressed_1s>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d00f      	beq.n	80002e4 <fsm_for_input_processing_2+0x74>
				buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <fsm_for_input_processing_2+0x80>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	701a      	strb	r2, [r3, #0]
		break;
 80002ca:	e00b      	b.n	80002e4 <fsm_for_input_processing_2+0x74>
		if(!is_button_pressed(2)){
 80002cc:	2002      	movs	r0, #2
 80002ce:	f000 f897 	bl	8000400 <is_button_pressed>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d107      	bne.n	80002e8 <fsm_for_input_processing_2+0x78>
			buttonState2 = BUTTON_RELEASED;
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <fsm_for_input_processing_2+0x80>)
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
		break;
 80002de:	e003      	b.n	80002e8 <fsm_for_input_processing_2+0x78>
		break;
 80002e0:	bf00      	nop
 80002e2:	e002      	b.n	80002ea <fsm_for_input_processing_2+0x7a>
		break;
 80002e4:	bf00      	nop
 80002e6:	e000      	b.n	80002ea <fsm_for_input_processing_2+0x7a>
		break;
 80002e8:	bf00      	nop
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000068 	.word	0x20000068
 80002f4:	20000072 	.word	0x20000072

080002f8 <button_reading>:


void button_reading(void){
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
	for(char i = 0; i < N0_OF_BUTTONS; i ++){
 80002fe:	2300      	movs	r3, #0
 8000300:	71fb      	strb	r3, [r7, #7]
 8000302:	e069      	b.n	80003d8 <button_reading+0xe0>
		if (i == 0)
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d10e      	bne.n	8000328 <button_reading+0x30>
		{
			debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800030a:	79fa      	ldrb	r2, [r7, #7]
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4936      	ldr	r1, [pc, #216]	; (80003e8 <button_reading+0xf0>)
 8000310:	5c89      	ldrb	r1, [r1, r2]
 8000312:	4a36      	ldr	r2, [pc, #216]	; (80003ec <button_reading+0xf4>)
 8000314:	54d1      	strb	r1, [r2, r3]
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000316:	79fc      	ldrb	r4, [r7, #7]
 8000318:	2101      	movs	r1, #1
 800031a:	4835      	ldr	r0, [pc, #212]	; (80003f0 <button_reading+0xf8>)
 800031c:	f001 fec8 	bl	80020b0 <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	4b30      	ldr	r3, [pc, #192]	; (80003e8 <button_reading+0xf0>)
 8000326:	551a      	strb	r2, [r3, r4]
		}
		if (i == 1)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d10e      	bne.n	800034c <button_reading+0x54>
		{
			debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 800032e:	79fa      	ldrb	r2, [r7, #7]
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	492d      	ldr	r1, [pc, #180]	; (80003e8 <button_reading+0xf0>)
 8000334:	5c89      	ldrb	r1, [r1, r2]
 8000336:	4a2d      	ldr	r2, [pc, #180]	; (80003ec <button_reading+0xf4>)
 8000338:	54d1      	strb	r1, [r2, r3]
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800033a:	79fc      	ldrb	r4, [r7, #7]
 800033c:	2102      	movs	r1, #2
 800033e:	482c      	ldr	r0, [pc, #176]	; (80003f0 <button_reading+0xf8>)
 8000340:	f001 feb6 	bl	80020b0 <HAL_GPIO_ReadPin>
 8000344:	4603      	mov	r3, r0
 8000346:	461a      	mov	r2, r3
 8000348:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <button_reading+0xf0>)
 800034a:	551a      	strb	r2, [r3, r4]
		}
		if (i == 2)
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d10e      	bne.n	8000370 <button_reading+0x78>
		{
			debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000352:	79fa      	ldrb	r2, [r7, #7]
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	4924      	ldr	r1, [pc, #144]	; (80003e8 <button_reading+0xf0>)
 8000358:	5c89      	ldrb	r1, [r1, r2]
 800035a:	4a24      	ldr	r2, [pc, #144]	; (80003ec <button_reading+0xf4>)
 800035c:	54d1      	strb	r1, [r2, r3]
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 800035e:	79fc      	ldrb	r4, [r7, #7]
 8000360:	2104      	movs	r1, #4
 8000362:	4823      	ldr	r0, [pc, #140]	; (80003f0 <button_reading+0xf8>)
 8000364:	f001 fea4 	bl	80020b0 <HAL_GPIO_ReadPin>
 8000368:	4603      	mov	r3, r0
 800036a:	461a      	mov	r2, r3
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <button_reading+0xf0>)
 800036e:	551a      	strb	r2, [r3, r4]
		}
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <button_reading+0xf0>)
 8000374:	5cd2      	ldrb	r2, [r2, r3]
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	491c      	ldr	r1, [pc, #112]	; (80003ec <button_reading+0xf4>)
 800037a:	5ccb      	ldrb	r3, [r1, r3]
 800037c:	429a      	cmp	r2, r3
 800037e:	d105      	bne.n	800038c <button_reading+0x94>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000380:	79fa      	ldrb	r2, [r7, #7]
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	4918      	ldr	r1, [pc, #96]	; (80003e8 <button_reading+0xf0>)
 8000386:	5c89      	ldrb	r1, [r1, r2]
 8000388:	4a1a      	ldr	r2, [pc, #104]	; (80003f4 <button_reading+0xfc>)
 800038a:	54d1      	strb	r1, [r2, r3]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <button_reading+0xfc>)
 8000390:	5cd3      	ldrb	r3, [r2, r3]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d114      	bne.n	80003c0 <button_reading+0xc8>
			//if a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4a17      	ldr	r2, [pc, #92]	; (80003f8 <button_reading+0x100>)
 800039a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800039e:	2b63      	cmp	r3, #99	; 0x63
 80003a0:	d809      	bhi.n	80003b6 <button_reading+0xbe>
					counterForButtonPress1s[i]++;
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <button_reading+0x100>)
 80003a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003aa:	3201      	adds	r2, #1
 80003ac:	b291      	uxth	r1, r2
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <button_reading+0x100>)
 80003b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003b4:	e00d      	b.n	80003d2 <button_reading+0xda>
				} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	4a10      	ldr	r2, [pc, #64]	; (80003fc <button_reading+0x104>)
 80003ba:	2101      	movs	r1, #1
 80003bc:	54d1      	strb	r1, [r2, r3]
 80003be:	e008      	b.n	80003d2 <button_reading+0xda>
					//todo
				}
			} else {
				counterForButtonPress1s[i] = 0;
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	4a0d      	ldr	r2, [pc, #52]	; (80003f8 <button_reading+0x100>)
 80003c4:	2100      	movs	r1, #0
 80003c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <button_reading+0x104>)
 80003ce:	2100      	movs	r1, #0
 80003d0:	54d1      	strb	r1, [r2, r3]
	for(char i = 0; i < N0_OF_BUTTONS; i ++){
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	3301      	adds	r3, #1
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d992      	bls.n	8000304 <button_reading+0xc>
			}
	}
}
 80003de:	bf00      	nop
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	20000054 	.word	0x20000054
 80003ec:	20000058 	.word	0x20000058
 80003f0:	40010c00 	.word	0x40010c00
 80003f4:	20000050 	.word	0x20000050
 80003f8:	20000060 	.word	0x20000060
 80003fc:	2000005c 	.word	0x2000005c

08000400 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b02      	cmp	r3, #2
 800040e:	d901      	bls.n	8000414 <is_button_pressed+0x14>
 8000410:	2300      	movs	r3, #0
 8000412:	e007      	b.n	8000424 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4a06      	ldr	r2, [pc, #24]	; (8000430 <is_button_pressed+0x30>)
 8000418:	5cd3      	ldrb	r3, [r2, r3]
 800041a:	2b00      	cmp	r3, #0
 800041c:	bf0c      	ite	eq
 800041e:	2301      	moveq	r3, #1
 8000420:	2300      	movne	r3, #0
 8000422:	b2db      	uxtb	r3, r3
}
 8000424:	4618      	mov	r0, r3
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	20000050 	.word	0x20000050

08000434 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b02      	cmp	r3, #2
 8000442:	d901      	bls.n	8000448 <is_button_pressed_1s+0x14>
 8000444:	23ff      	movs	r3, #255	; 0xff
 8000446:	e007      	b.n	8000458 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4a06      	ldr	r2, [pc, #24]	; (8000464 <is_button_pressed_1s+0x30>)
 800044c:	5cd3      	ldrb	r3, [r2, r3]
 800044e:	2b01      	cmp	r3, #1
 8000450:	bf0c      	ite	eq
 8000452:	2301      	moveq	r3, #1
 8000454:	2300      	movne	r3, #0
 8000456:	b2db      	uxtb	r3, r3
}
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	2000005c 	.word	0x2000005c

08000468 <setTimerBlinking>:
{
	timer0_counter = duration / TIMER_CYCLE;
	timer0_flag = 0;
}
void setTimerBlinking(int duration)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <setTimerBlinking+0x28>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	fb92 f3f3 	sdiv	r3, r2, r3
 800047a:	4a06      	ldr	r2, [pc, #24]	; (8000494 <setTimerBlinking+0x2c>)
 800047c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <setTimerBlinking+0x30>)
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	2000001c 	.word	0x2000001c
 8000494:	20000080 	.word	0x20000080
 8000498:	20000084 	.word	0x20000084

0800049c <setTimer1s>:
void setTimer1s(int duration)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80004a4:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <setTimer1s+0x28>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80004ae:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <setTimer1s+0x2c>)
 80004b0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <setTimer1s+0x30>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	2000001c 	.word	0x2000001c
 80004c8:	20000088 	.word	0x20000088
 80004cc:	2000008c 	.word	0x2000008c

080004d0 <timer_run>:

void timer_run () {
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
	if(timer0_counter > 0) {
 80004d4:	4b19      	ldr	r3, [pc, #100]	; (800053c <timer_run+0x6c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	dd04      	ble.n	80004e6 <timer_run+0x16>
		timer0_counter --;
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <timer_run+0x6c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	4a16      	ldr	r2, [pc, #88]	; (800053c <timer_run+0x6c>)
 80004e4:	6013      	str	r3, [r2, #0]
	}
	if(timer0_counter == 0) {
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <timer_run+0x6c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d102      	bne.n	80004f4 <timer_run+0x24>
		timer0_flag = 1;
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <timer_run+0x70>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
	}

	if(timer1_counter > 0) {
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <timer_run+0x74>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dd04      	ble.n	8000506 <timer_run+0x36>
		timer1_counter --;
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <timer_run+0x74>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3b01      	subs	r3, #1
 8000502:	4a10      	ldr	r2, [pc, #64]	; (8000544 <timer_run+0x74>)
 8000504:	6013      	str	r3, [r2, #0]
	}
	if(timer1_counter == 0)
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <timer_run+0x74>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d102      	bne.n	8000514 <timer_run+0x44>
	{
		timer1_flag = 1;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <timer_run+0x78>)
 8000510:	2201      	movs	r2, #1
 8000512:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) {
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <timer_run+0x7c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	dd04      	ble.n	8000526 <timer_run+0x56>
		timer2_counter --;
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <timer_run+0x7c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3b01      	subs	r3, #1
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <timer_run+0x7c>)
 8000524:	6013      	str	r3, [r2, #0]
	}
	if(timer2_counter == 0)
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <timer_run+0x7c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d102      	bne.n	8000534 <timer_run+0x64>
	{
		timer2_flag = 1;
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <timer_run+0x80>)
 8000530:	2201      	movs	r2, #1
 8000532:	601a      	str	r2, [r3, #0]
	}
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	20000078 	.word	0x20000078
 8000540:	2000007c 	.word	0x2000007c
 8000544:	20000080 	.word	0x20000080
 8000548:	20000084 	.word	0x20000084
 800054c:	20000088 	.word	0x20000088
 8000550:	2000008c 	.word	0x2000008c

08000554 <turn_on_pin_traffic>:

void turn_on_pin_traffic(int pin, int state)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	3b01      	subs	r3, #1
 8000562:	2b06      	cmp	r3, #6
 8000564:	d84f      	bhi.n	8000606 <turn_on_pin_traffic+0xb2>
 8000566:	a201      	add	r2, pc, #4	; (adr r2, 800056c <turn_on_pin_traffic+0x18>)
 8000568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056c:	08000589 	.word	0x08000589
 8000570:	0800059b 	.word	0x0800059b
 8000574:	080005ad 	.word	0x080005ad
 8000578:	080005bf 	.word	0x080005bf
 800057c:	080005d1 	.word	0x080005d1
 8000580:	080005e3 	.word	0x080005e3
 8000584:	080005f5 	.word	0x080005f5
	switch(pin){
	case 1:
		HAL_GPIO_WritePin(traffic0_GPIO_Port, traffic0_Pin, state);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000592:	481f      	ldr	r0, [pc, #124]	; (8000610 <turn_on_pin_traffic+0xbc>)
 8000594:	f001 fda3 	bl	80020de <HAL_GPIO_WritePin>
		break;
 8000598:	e035      	b.n	8000606 <turn_on_pin_traffic+0xb2>
	case 2:
		HAL_GPIO_WritePin(traffic1_GPIO_Port, traffic1_Pin, state);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	481a      	ldr	r0, [pc, #104]	; (8000610 <turn_on_pin_traffic+0xbc>)
 80005a6:	f001 fd9a 	bl	80020de <HAL_GPIO_WritePin>
		break;
 80005aa:	e02c      	b.n	8000606 <turn_on_pin_traffic+0xb2>
	case 3:
		HAL_GPIO_WritePin(traffic2_GPIO_Port, traffic2_Pin, state);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	461a      	mov	r2, r3
 80005b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b6:	4816      	ldr	r0, [pc, #88]	; (8000610 <turn_on_pin_traffic+0xbc>)
 80005b8:	f001 fd91 	bl	80020de <HAL_GPIO_WritePin>
		break;
 80005bc:	e023      	b.n	8000606 <turn_on_pin_traffic+0xb2>
	case 4:
		HAL_GPIO_WritePin(traffic3_GPIO_Port, traffic3_Pin, state);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	461a      	mov	r2, r3
 80005c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c8:	4811      	ldr	r0, [pc, #68]	; (8000610 <turn_on_pin_traffic+0xbc>)
 80005ca:	f001 fd88 	bl	80020de <HAL_GPIO_WritePin>
		break;
 80005ce:	e01a      	b.n	8000606 <turn_on_pin_traffic+0xb2>
	case 5:
		HAL_GPIO_WritePin(traffic4_GPIO_Port, traffic4_Pin, state);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	461a      	mov	r2, r3
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <turn_on_pin_traffic+0xbc>)
 80005dc:	f001 fd7f 	bl	80020de <HAL_GPIO_WritePin>
		break;
 80005e0:	e011      	b.n	8000606 <turn_on_pin_traffic+0xb2>
	case 6:
		HAL_GPIO_WritePin(traffic5_GPIO_Port, traffic5_Pin, state);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <turn_on_pin_traffic+0xbc>)
 80005ee:	f001 fd76 	bl	80020de <HAL_GPIO_WritePin>
		break;
 80005f2:	e008      	b.n	8000606 <turn_on_pin_traffic+0xb2>
	case 7:
		HAL_GPIO_WritePin(traffic6_GPIO_Port, traffic6_Pin, state);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <turn_on_pin_traffic+0xbc>)
 8000600:	f001 fd6d 	bl	80020de <HAL_GPIO_WritePin>
		break;
 8000604:	bf00      	nop
	}

}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40010c00 	.word	0x40010c00

08000614 <turn_on_pin_seg0>:

void turn_on_pin_seg0(int pin, int state)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3b01      	subs	r3, #1
 8000622:	2b06      	cmp	r3, #6
 8000624:	d848      	bhi.n	80006b8 <turn_on_pin_seg0+0xa4>
 8000626:	a201      	add	r2, pc, #4	; (adr r2, 800062c <turn_on_pin_seg0+0x18>)
 8000628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062c:	08000649 	.word	0x08000649
 8000630:	08000659 	.word	0x08000659
 8000634:	08000669 	.word	0x08000669
 8000638:	08000679 	.word	0x08000679
 800063c:	08000689 	.word	0x08000689
 8000640:	08000699 	.word	0x08000699
 8000644:	080006a9 	.word	0x080006a9
	switch(pin){
	case 1:
		HAL_GPIO_WritePin(dis0_0_GPIO_Port, dis0_0_Pin, state);
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	2102      	movs	r1, #2
 8000650:	481b      	ldr	r0, [pc, #108]	; (80006c0 <turn_on_pin_seg0+0xac>)
 8000652:	f001 fd44 	bl	80020de <HAL_GPIO_WritePin>
		break;
 8000656:	e02f      	b.n	80006b8 <turn_on_pin_seg0+0xa4>
	case 2:
		HAL_GPIO_WritePin(dis0_1_GPIO_Port, dis0_1_Pin, state);
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	2104      	movs	r1, #4
 8000660:	4817      	ldr	r0, [pc, #92]	; (80006c0 <turn_on_pin_seg0+0xac>)
 8000662:	f001 fd3c 	bl	80020de <HAL_GPIO_WritePin>
		break;
 8000666:	e027      	b.n	80006b8 <turn_on_pin_seg0+0xa4>
	case 3:
		HAL_GPIO_WritePin(dis0_2_GPIO_Port, dis0_2_Pin, state);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	2108      	movs	r1, #8
 8000670:	4813      	ldr	r0, [pc, #76]	; (80006c0 <turn_on_pin_seg0+0xac>)
 8000672:	f001 fd34 	bl	80020de <HAL_GPIO_WritePin>
		break;
 8000676:	e01f      	b.n	80006b8 <turn_on_pin_seg0+0xa4>
	case 4:
		HAL_GPIO_WritePin(dis0_3_GPIO_Port, dis0_3_Pin, state);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	2110      	movs	r1, #16
 8000680:	480f      	ldr	r0, [pc, #60]	; (80006c0 <turn_on_pin_seg0+0xac>)
 8000682:	f001 fd2c 	bl	80020de <HAL_GPIO_WritePin>
		break;
 8000686:	e017      	b.n	80006b8 <turn_on_pin_seg0+0xa4>
	case 5:
		HAL_GPIO_WritePin(dis0_4_GPIO_Port, dis0_4_Pin, state);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	2120      	movs	r1, #32
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <turn_on_pin_seg0+0xac>)
 8000692:	f001 fd24 	bl	80020de <HAL_GPIO_WritePin>
		break;
 8000696:	e00f      	b.n	80006b8 <turn_on_pin_seg0+0xa4>
	case 6:
		HAL_GPIO_WritePin(dis0_5_GPIO_Port, dis0_5_Pin, state);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <turn_on_pin_seg0+0xac>)
 80006a2:	f001 fd1c 	bl	80020de <HAL_GPIO_WritePin>
		break;
 80006a6:	e007      	b.n	80006b8 <turn_on_pin_seg0+0xa4>
	case 7:
		HAL_GPIO_WritePin(dis0_6_GPIO_Port, dis0_6_Pin, state);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <turn_on_pin_seg0+0xac>)
 80006b2:	f001 fd14 	bl	80020de <HAL_GPIO_WritePin>
		break;
 80006b6:	bf00      	nop
	}
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40010800 	.word	0x40010800

080006c4 <turn_on_pin_seg1>:

void turn_on_pin_seg1(int pin, int state)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d84f      	bhi.n	8000776 <turn_on_pin_seg1+0xb2>
 80006d6:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <turn_on_pin_seg1+0x18>)
 80006d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006dc:	080006f9 	.word	0x080006f9
 80006e0:	0800070b 	.word	0x0800070b
 80006e4:	0800071d 	.word	0x0800071d
 80006e8:	0800072f 	.word	0x0800072f
 80006ec:	08000741 	.word	0x08000741
 80006f0:	08000753 	.word	0x08000753
 80006f4:	08000765 	.word	0x08000765
	switch(pin){
	case 1:
		HAL_GPIO_WritePin(dis1_0_GPIO_Port, dis1_0_Pin, state);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000702:	481f      	ldr	r0, [pc, #124]	; (8000780 <turn_on_pin_seg1+0xbc>)
 8000704:	f001 fceb 	bl	80020de <HAL_GPIO_WritePin>
		break;
 8000708:	e035      	b.n	8000776 <turn_on_pin_seg1+0xb2>
	case 2:
		HAL_GPIO_WritePin(dis1_1_GPIO_Port, dis1_1_Pin, state);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000714:	481a      	ldr	r0, [pc, #104]	; (8000780 <turn_on_pin_seg1+0xbc>)
 8000716:	f001 fce2 	bl	80020de <HAL_GPIO_WritePin>
		break;
 800071a:	e02c      	b.n	8000776 <turn_on_pin_seg1+0xb2>
	case 3:
		HAL_GPIO_WritePin(dis1_2_GPIO_Port, dis1_2_Pin, state);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	461a      	mov	r2, r3
 8000722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000726:	4816      	ldr	r0, [pc, #88]	; (8000780 <turn_on_pin_seg1+0xbc>)
 8000728:	f001 fcd9 	bl	80020de <HAL_GPIO_WritePin>
		break;
 800072c:	e023      	b.n	8000776 <turn_on_pin_seg1+0xb2>
	case 4:
		HAL_GPIO_WritePin(dis1_3_GPIO_Port, dis1_3_Pin, state);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	461a      	mov	r2, r3
 8000734:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <turn_on_pin_seg1+0xbc>)
 800073a:	f001 fcd0 	bl	80020de <HAL_GPIO_WritePin>
		break;
 800073e:	e01a      	b.n	8000776 <turn_on_pin_seg1+0xb2>
	case 5:
		HAL_GPIO_WritePin(dis1_4_GPIO_Port, dis1_4_Pin, state);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <turn_on_pin_seg1+0xbc>)
 800074c:	f001 fcc7 	bl	80020de <HAL_GPIO_WritePin>
		break;
 8000750:	e011      	b.n	8000776 <turn_on_pin_seg1+0xb2>
	case 6:
		HAL_GPIO_WritePin(dis1_5_GPIO_Port, dis1_5_Pin, state);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	461a      	mov	r2, r3
 8000758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <turn_on_pin_seg1+0xbc>)
 800075e:	f001 fcbe 	bl	80020de <HAL_GPIO_WritePin>
		break;
 8000762:	e008      	b.n	8000776 <turn_on_pin_seg1+0xb2>
	case 7:
		HAL_GPIO_WritePin(dis1_6_GPIO_Port, dis1_6_Pin, state);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800076e:	4804      	ldr	r0, [pc, #16]	; (8000780 <turn_on_pin_seg1+0xbc>)
 8000770:	f001 fcb5 	bl	80020de <HAL_GPIO_WritePin>
		break;
 8000774:	bf00      	nop
	}
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40010800 	.word	0x40010800

08000784 <display7SEG>:
int TRAFFIC = 0;
int SEG0 = 1;
int SEG1 = 2;

void display7SEG(int seg, int num)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	if (seg == TRAFFIC)
 800078e:	4be5      	ldr	r3, [pc, #916]	; (8000b24 <display7SEG+0x3a0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	f040 813f 	bne.w	8000a18 <display7SEG+0x294>
	{
		if (num == 0)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d11c      	bne.n	80007da <display7SEG+0x56>
		{
			turn_on_pin_traffic(1, GPIO_PIN_RESET);
 80007a0:	2100      	movs	r1, #0
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff fed6 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(2, GPIO_PIN_RESET);
 80007a8:	2100      	movs	r1, #0
 80007aa:	2002      	movs	r0, #2
 80007ac:	f7ff fed2 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(3, GPIO_PIN_RESET);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2003      	movs	r0, #3
 80007b4:	f7ff fece 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(4, GPIO_PIN_RESET);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2004      	movs	r0, #4
 80007bc:	f7ff feca 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(5, GPIO_PIN_RESET);
 80007c0:	2100      	movs	r1, #0
 80007c2:	2005      	movs	r0, #5
 80007c4:	f7ff fec6 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(6, GPIO_PIN_RESET);
 80007c8:	2100      	movs	r1, #0
 80007ca:	2006      	movs	r0, #6
 80007cc:	f7ff fec2 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(7, GPIO_PIN_SET);
 80007d0:	2101      	movs	r1, #1
 80007d2:	2007      	movs	r0, #7
 80007d4:	f7ff febe 	bl	8000554 <turn_on_pin_traffic>
 80007d8:	e11e      	b.n	8000a18 <display7SEG+0x294>
		}
		else if (num == 1)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d11c      	bne.n	800081a <display7SEG+0x96>
		{
			turn_on_pin_traffic(1, GPIO_PIN_SET);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff feb6 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(2, GPIO_PIN_RESET);
 80007e8:	2100      	movs	r1, #0
 80007ea:	2002      	movs	r0, #2
 80007ec:	f7ff feb2 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(3, GPIO_PIN_RESET);
 80007f0:	2100      	movs	r1, #0
 80007f2:	2003      	movs	r0, #3
 80007f4:	f7ff feae 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(4, GPIO_PIN_SET);
 80007f8:	2101      	movs	r1, #1
 80007fa:	2004      	movs	r0, #4
 80007fc:	f7ff feaa 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(5, GPIO_PIN_SET);
 8000800:	2101      	movs	r1, #1
 8000802:	2005      	movs	r0, #5
 8000804:	f7ff fea6 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(6, GPIO_PIN_SET);
 8000808:	2101      	movs	r1, #1
 800080a:	2006      	movs	r0, #6
 800080c:	f7ff fea2 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(7, GPIO_PIN_SET);
 8000810:	2101      	movs	r1, #1
 8000812:	2007      	movs	r0, #7
 8000814:	f7ff fe9e 	bl	8000554 <turn_on_pin_traffic>
 8000818:	e0fe      	b.n	8000a18 <display7SEG+0x294>
		}
		else if (num == 2)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d11c      	bne.n	800085a <display7SEG+0xd6>
		{
			turn_on_pin_traffic(1, GPIO_PIN_RESET);
 8000820:	2100      	movs	r1, #0
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff fe96 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(2, GPIO_PIN_RESET);
 8000828:	2100      	movs	r1, #0
 800082a:	2002      	movs	r0, #2
 800082c:	f7ff fe92 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(3, GPIO_PIN_SET);
 8000830:	2101      	movs	r1, #1
 8000832:	2003      	movs	r0, #3
 8000834:	f7ff fe8e 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(4, GPIO_PIN_RESET);
 8000838:	2100      	movs	r1, #0
 800083a:	2004      	movs	r0, #4
 800083c:	f7ff fe8a 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(5, GPIO_PIN_RESET);
 8000840:	2100      	movs	r1, #0
 8000842:	2005      	movs	r0, #5
 8000844:	f7ff fe86 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(6, GPIO_PIN_SET);
 8000848:	2101      	movs	r1, #1
 800084a:	2006      	movs	r0, #6
 800084c:	f7ff fe82 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(7, GPIO_PIN_RESET);
 8000850:	2100      	movs	r1, #0
 8000852:	2007      	movs	r0, #7
 8000854:	f7ff fe7e 	bl	8000554 <turn_on_pin_traffic>
 8000858:	e0de      	b.n	8000a18 <display7SEG+0x294>
		}
		else if (num == 3)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b03      	cmp	r3, #3
 800085e:	d11c      	bne.n	800089a <display7SEG+0x116>
		{
			turn_on_pin_traffic(1, GPIO_PIN_RESET);
 8000860:	2100      	movs	r1, #0
 8000862:	2001      	movs	r0, #1
 8000864:	f7ff fe76 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(2, GPIO_PIN_RESET);
 8000868:	2100      	movs	r1, #0
 800086a:	2002      	movs	r0, #2
 800086c:	f7ff fe72 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(3, GPIO_PIN_RESET);
 8000870:	2100      	movs	r1, #0
 8000872:	2003      	movs	r0, #3
 8000874:	f7ff fe6e 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(4, GPIO_PIN_RESET);
 8000878:	2100      	movs	r1, #0
 800087a:	2004      	movs	r0, #4
 800087c:	f7ff fe6a 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(5, GPIO_PIN_SET);
 8000880:	2101      	movs	r1, #1
 8000882:	2005      	movs	r0, #5
 8000884:	f7ff fe66 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(6, GPIO_PIN_SET);
 8000888:	2101      	movs	r1, #1
 800088a:	2006      	movs	r0, #6
 800088c:	f7ff fe62 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(7, GPIO_PIN_RESET);
 8000890:	2100      	movs	r1, #0
 8000892:	2007      	movs	r0, #7
 8000894:	f7ff fe5e 	bl	8000554 <turn_on_pin_traffic>
 8000898:	e0be      	b.n	8000a18 <display7SEG+0x294>
		}
		else if (num == 4)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	2b04      	cmp	r3, #4
 800089e:	d11c      	bne.n	80008da <display7SEG+0x156>
		{
			turn_on_pin_traffic(1, GPIO_PIN_SET);
 80008a0:	2101      	movs	r1, #1
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff fe56 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(2, GPIO_PIN_RESET);
 80008a8:	2100      	movs	r1, #0
 80008aa:	2002      	movs	r0, #2
 80008ac:	f7ff fe52 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(3, GPIO_PIN_RESET);
 80008b0:	2100      	movs	r1, #0
 80008b2:	2003      	movs	r0, #3
 80008b4:	f7ff fe4e 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(4, GPIO_PIN_SET);
 80008b8:	2101      	movs	r1, #1
 80008ba:	2004      	movs	r0, #4
 80008bc:	f7ff fe4a 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(5, GPIO_PIN_SET);
 80008c0:	2101      	movs	r1, #1
 80008c2:	2005      	movs	r0, #5
 80008c4:	f7ff fe46 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(6, GPIO_PIN_RESET);
 80008c8:	2100      	movs	r1, #0
 80008ca:	2006      	movs	r0, #6
 80008cc:	f7ff fe42 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(7, GPIO_PIN_RESET);
 80008d0:	2100      	movs	r1, #0
 80008d2:	2007      	movs	r0, #7
 80008d4:	f7ff fe3e 	bl	8000554 <turn_on_pin_traffic>
 80008d8:	e09e      	b.n	8000a18 <display7SEG+0x294>
		}
		else if (num == 5)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	2b05      	cmp	r3, #5
 80008de:	d11c      	bne.n	800091a <display7SEG+0x196>
		{
			turn_on_pin_traffic(1, GPIO_PIN_RESET);
 80008e0:	2100      	movs	r1, #0
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff fe36 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(2, GPIO_PIN_SET);
 80008e8:	2101      	movs	r1, #1
 80008ea:	2002      	movs	r0, #2
 80008ec:	f7ff fe32 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(3, GPIO_PIN_RESET);
 80008f0:	2100      	movs	r1, #0
 80008f2:	2003      	movs	r0, #3
 80008f4:	f7ff fe2e 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(4, GPIO_PIN_RESET);
 80008f8:	2100      	movs	r1, #0
 80008fa:	2004      	movs	r0, #4
 80008fc:	f7ff fe2a 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(5, GPIO_PIN_SET);
 8000900:	2101      	movs	r1, #1
 8000902:	2005      	movs	r0, #5
 8000904:	f7ff fe26 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(6, GPIO_PIN_RESET);
 8000908:	2100      	movs	r1, #0
 800090a:	2006      	movs	r0, #6
 800090c:	f7ff fe22 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(7, GPIO_PIN_RESET);
 8000910:	2100      	movs	r1, #0
 8000912:	2007      	movs	r0, #7
 8000914:	f7ff fe1e 	bl	8000554 <turn_on_pin_traffic>
 8000918:	e07e      	b.n	8000a18 <display7SEG+0x294>
		}
		else if (num == 6)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b06      	cmp	r3, #6
 800091e:	d11c      	bne.n	800095a <display7SEG+0x1d6>
		{
			turn_on_pin_traffic(1, GPIO_PIN_RESET);
 8000920:	2100      	movs	r1, #0
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff fe16 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(2, GPIO_PIN_SET);
 8000928:	2101      	movs	r1, #1
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fe12 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(3, GPIO_PIN_RESET);
 8000930:	2100      	movs	r1, #0
 8000932:	2003      	movs	r0, #3
 8000934:	f7ff fe0e 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(4, GPIO_PIN_RESET);
 8000938:	2100      	movs	r1, #0
 800093a:	2004      	movs	r0, #4
 800093c:	f7ff fe0a 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(5, GPIO_PIN_RESET);
 8000940:	2100      	movs	r1, #0
 8000942:	2005      	movs	r0, #5
 8000944:	f7ff fe06 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(6, GPIO_PIN_RESET);
 8000948:	2100      	movs	r1, #0
 800094a:	2006      	movs	r0, #6
 800094c:	f7ff fe02 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(7, GPIO_PIN_RESET);
 8000950:	2100      	movs	r1, #0
 8000952:	2007      	movs	r0, #7
 8000954:	f7ff fdfe 	bl	8000554 <turn_on_pin_traffic>
 8000958:	e05e      	b.n	8000a18 <display7SEG+0x294>
		}
		else if (num == 7)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2b07      	cmp	r3, #7
 800095e:	d11c      	bne.n	800099a <display7SEG+0x216>
		{
			turn_on_pin_traffic(1, GPIO_PIN_RESET);
 8000960:	2100      	movs	r1, #0
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff fdf6 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(2, GPIO_PIN_RESET);
 8000968:	2100      	movs	r1, #0
 800096a:	2002      	movs	r0, #2
 800096c:	f7ff fdf2 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(3, GPIO_PIN_RESET);
 8000970:	2100      	movs	r1, #0
 8000972:	2003      	movs	r0, #3
 8000974:	f7ff fdee 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(4, GPIO_PIN_SET);
 8000978:	2101      	movs	r1, #1
 800097a:	2004      	movs	r0, #4
 800097c:	f7ff fdea 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(5, GPIO_PIN_SET);
 8000980:	2101      	movs	r1, #1
 8000982:	2005      	movs	r0, #5
 8000984:	f7ff fde6 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(6, GPIO_PIN_SET);
 8000988:	2101      	movs	r1, #1
 800098a:	2006      	movs	r0, #6
 800098c:	f7ff fde2 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(7, GPIO_PIN_SET);
 8000990:	2101      	movs	r1, #1
 8000992:	2007      	movs	r0, #7
 8000994:	f7ff fdde 	bl	8000554 <turn_on_pin_traffic>
 8000998:	e03e      	b.n	8000a18 <display7SEG+0x294>
		}
		else if (num == 8)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b08      	cmp	r3, #8
 800099e:	d11c      	bne.n	80009da <display7SEG+0x256>
		{
			turn_on_pin_traffic(1, GPIO_PIN_RESET);
 80009a0:	2100      	movs	r1, #0
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff fdd6 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(2, GPIO_PIN_RESET);
 80009a8:	2100      	movs	r1, #0
 80009aa:	2002      	movs	r0, #2
 80009ac:	f7ff fdd2 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(3, GPIO_PIN_RESET);
 80009b0:	2100      	movs	r1, #0
 80009b2:	2003      	movs	r0, #3
 80009b4:	f7ff fdce 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(4, GPIO_PIN_RESET);
 80009b8:	2100      	movs	r1, #0
 80009ba:	2004      	movs	r0, #4
 80009bc:	f7ff fdca 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(5, GPIO_PIN_RESET);
 80009c0:	2100      	movs	r1, #0
 80009c2:	2005      	movs	r0, #5
 80009c4:	f7ff fdc6 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(6, GPIO_PIN_RESET);
 80009c8:	2100      	movs	r1, #0
 80009ca:	2006      	movs	r0, #6
 80009cc:	f7ff fdc2 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(7, GPIO_PIN_RESET);
 80009d0:	2100      	movs	r1, #0
 80009d2:	2007      	movs	r0, #7
 80009d4:	f7ff fdbe 	bl	8000554 <turn_on_pin_traffic>
 80009d8:	e01e      	b.n	8000a18 <display7SEG+0x294>
		}
		else if (num == 9)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d11b      	bne.n	8000a18 <display7SEG+0x294>
		{
			turn_on_pin_traffic(1, GPIO_PIN_RESET);
 80009e0:	2100      	movs	r1, #0
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fdb6 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(2, GPIO_PIN_RESET);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff fdb2 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(3, GPIO_PIN_RESET);
 80009f0:	2100      	movs	r1, #0
 80009f2:	2003      	movs	r0, #3
 80009f4:	f7ff fdae 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(4, GPIO_PIN_RESET);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2004      	movs	r0, #4
 80009fc:	f7ff fdaa 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(5, GPIO_PIN_SET);
 8000a00:	2101      	movs	r1, #1
 8000a02:	2005      	movs	r0, #5
 8000a04:	f7ff fda6 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(6, GPIO_PIN_RESET);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2006      	movs	r0, #6
 8000a0c:	f7ff fda2 	bl	8000554 <turn_on_pin_traffic>
			turn_on_pin_traffic(7, GPIO_PIN_RESET);
 8000a10:	2100      	movs	r1, #0
 8000a12:	2007      	movs	r0, #7
 8000a14:	f7ff fd9e 	bl	8000554 <turn_on_pin_traffic>
		}
	}
	if (seg == SEG0)
 8000a18:	4b43      	ldr	r3, [pc, #268]	; (8000b28 <display7SEG+0x3a4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	f040 8143 	bne.w	8000caa <display7SEG+0x526>
	{
		if (num == 0)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d11c      	bne.n	8000a64 <display7SEG+0x2e0>
		{
			turn_on_pin_seg0(1, GPIO_PIN_RESET);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f7ff fdf1 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(2, GPIO_PIN_RESET);
 8000a32:	2100      	movs	r1, #0
 8000a34:	2002      	movs	r0, #2
 8000a36:	f7ff fded 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(3, GPIO_PIN_RESET);
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f7ff fde9 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(4, GPIO_PIN_RESET);
 8000a42:	2100      	movs	r1, #0
 8000a44:	2004      	movs	r0, #4
 8000a46:	f7ff fde5 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(5, GPIO_PIN_RESET);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2005      	movs	r0, #5
 8000a4e:	f7ff fde1 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(6, GPIO_PIN_RESET);
 8000a52:	2100      	movs	r1, #0
 8000a54:	2006      	movs	r0, #6
 8000a56:	f7ff fddd 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(7, GPIO_PIN_SET);
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2007      	movs	r0, #7
 8000a5e:	f7ff fdd9 	bl	8000614 <turn_on_pin_seg0>
 8000a62:	e122      	b.n	8000caa <display7SEG+0x526>
		}
		else if (num == 1)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d11c      	bne.n	8000aa4 <display7SEG+0x320>
		{
			turn_on_pin_seg0(1, GPIO_PIN_SET);
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff fdd1 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(2, GPIO_PIN_RESET);
 8000a72:	2100      	movs	r1, #0
 8000a74:	2002      	movs	r0, #2
 8000a76:	f7ff fdcd 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(3, GPIO_PIN_RESET);
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f7ff fdc9 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(4, GPIO_PIN_SET);
 8000a82:	2101      	movs	r1, #1
 8000a84:	2004      	movs	r0, #4
 8000a86:	f7ff fdc5 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(5, GPIO_PIN_SET);
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	2005      	movs	r0, #5
 8000a8e:	f7ff fdc1 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(6, GPIO_PIN_SET);
 8000a92:	2101      	movs	r1, #1
 8000a94:	2006      	movs	r0, #6
 8000a96:	f7ff fdbd 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(7, GPIO_PIN_SET);
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2007      	movs	r0, #7
 8000a9e:	f7ff fdb9 	bl	8000614 <turn_on_pin_seg0>
 8000aa2:	e102      	b.n	8000caa <display7SEG+0x526>
		}
		else if (num == 2)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d11c      	bne.n	8000ae4 <display7SEG+0x360>
		{
			turn_on_pin_seg0(1, GPIO_PIN_RESET);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fdb1 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(2, GPIO_PIN_RESET);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f7ff fdad 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(3, GPIO_PIN_SET);
 8000aba:	2101      	movs	r1, #1
 8000abc:	2003      	movs	r0, #3
 8000abe:	f7ff fda9 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(4, GPIO_PIN_RESET);
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2004      	movs	r0, #4
 8000ac6:	f7ff fda5 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(5, GPIO_PIN_RESET);
 8000aca:	2100      	movs	r1, #0
 8000acc:	2005      	movs	r0, #5
 8000ace:	f7ff fda1 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(6, GPIO_PIN_SET);
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	2006      	movs	r0, #6
 8000ad6:	f7ff fd9d 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(7, GPIO_PIN_RESET);
 8000ada:	2100      	movs	r1, #0
 8000adc:	2007      	movs	r0, #7
 8000ade:	f7ff fd99 	bl	8000614 <turn_on_pin_seg0>
 8000ae2:	e0e2      	b.n	8000caa <display7SEG+0x526>
		}
		else if (num == 3)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d120      	bne.n	8000b2c <display7SEG+0x3a8>
		{
			turn_on_pin_seg0(1, GPIO_PIN_RESET);
 8000aea:	2100      	movs	r1, #0
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff fd91 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(2, GPIO_PIN_RESET);
 8000af2:	2100      	movs	r1, #0
 8000af4:	2002      	movs	r0, #2
 8000af6:	f7ff fd8d 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(3, GPIO_PIN_RESET);
 8000afa:	2100      	movs	r1, #0
 8000afc:	2003      	movs	r0, #3
 8000afe:	f7ff fd89 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(4, GPIO_PIN_RESET);
 8000b02:	2100      	movs	r1, #0
 8000b04:	2004      	movs	r0, #4
 8000b06:	f7ff fd85 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(5, GPIO_PIN_SET);
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2005      	movs	r0, #5
 8000b0e:	f7ff fd81 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(6, GPIO_PIN_SET);
 8000b12:	2101      	movs	r1, #1
 8000b14:	2006      	movs	r0, #6
 8000b16:	f7ff fd7d 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(7, GPIO_PIN_RESET);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2007      	movs	r0, #7
 8000b1e:	f7ff fd79 	bl	8000614 <turn_on_pin_seg0>
 8000b22:	e0c2      	b.n	8000caa <display7SEG+0x526>
 8000b24:	20000090 	.word	0x20000090
 8000b28:	20000020 	.word	0x20000020
		}
		else if (num == 4)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d11c      	bne.n	8000b6c <display7SEG+0x3e8>
		{
			turn_on_pin_seg0(1, GPIO_PIN_SET);
 8000b32:	2101      	movs	r1, #1
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff fd6d 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(2, GPIO_PIN_RESET);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f7ff fd69 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(3, GPIO_PIN_RESET);
 8000b42:	2100      	movs	r1, #0
 8000b44:	2003      	movs	r0, #3
 8000b46:	f7ff fd65 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(4, GPIO_PIN_SET);
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2004      	movs	r0, #4
 8000b4e:	f7ff fd61 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(5, GPIO_PIN_SET);
 8000b52:	2101      	movs	r1, #1
 8000b54:	2005      	movs	r0, #5
 8000b56:	f7ff fd5d 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(6, GPIO_PIN_RESET);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2006      	movs	r0, #6
 8000b5e:	f7ff fd59 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(7, GPIO_PIN_RESET);
 8000b62:	2100      	movs	r1, #0
 8000b64:	2007      	movs	r0, #7
 8000b66:	f7ff fd55 	bl	8000614 <turn_on_pin_seg0>
 8000b6a:	e09e      	b.n	8000caa <display7SEG+0x526>
		}
		else if (num == 5)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2b05      	cmp	r3, #5
 8000b70:	d11c      	bne.n	8000bac <display7SEG+0x428>
		{
			turn_on_pin_seg0(1, GPIO_PIN_RESET);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fd4d 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(2, GPIO_PIN_SET);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f7ff fd49 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(3, GPIO_PIN_RESET);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2003      	movs	r0, #3
 8000b86:	f7ff fd45 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(4, GPIO_PIN_RESET);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f7ff fd41 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(5, GPIO_PIN_SET);
 8000b92:	2101      	movs	r1, #1
 8000b94:	2005      	movs	r0, #5
 8000b96:	f7ff fd3d 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(6, GPIO_PIN_RESET);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2006      	movs	r0, #6
 8000b9e:	f7ff fd39 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(7, GPIO_PIN_RESET);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2007      	movs	r0, #7
 8000ba6:	f7ff fd35 	bl	8000614 <turn_on_pin_seg0>
 8000baa:	e07e      	b.n	8000caa <display7SEG+0x526>
		}
		else if (num == 6)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d11c      	bne.n	8000bec <display7SEG+0x468>
		{
			turn_on_pin_seg0(1, GPIO_PIN_RESET);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff fd2d 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(2, GPIO_PIN_SET);
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f7ff fd29 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(3, GPIO_PIN_RESET);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f7ff fd25 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(4, GPIO_PIN_RESET);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2004      	movs	r0, #4
 8000bce:	f7ff fd21 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(5, GPIO_PIN_RESET);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2005      	movs	r0, #5
 8000bd6:	f7ff fd1d 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(6, GPIO_PIN_RESET);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2006      	movs	r0, #6
 8000bde:	f7ff fd19 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(7, GPIO_PIN_RESET);
 8000be2:	2100      	movs	r1, #0
 8000be4:	2007      	movs	r0, #7
 8000be6:	f7ff fd15 	bl	8000614 <turn_on_pin_seg0>
 8000bea:	e05e      	b.n	8000caa <display7SEG+0x526>
		}
		else if (num == 7)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	d11c      	bne.n	8000c2c <display7SEG+0x4a8>
		{
			turn_on_pin_seg0(1, GPIO_PIN_RESET);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f7ff fd0d 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(2, GPIO_PIN_RESET);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f7ff fd09 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(3, GPIO_PIN_RESET);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2003      	movs	r0, #3
 8000c06:	f7ff fd05 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(4, GPIO_PIN_SET);
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	2004      	movs	r0, #4
 8000c0e:	f7ff fd01 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(5, GPIO_PIN_SET);
 8000c12:	2101      	movs	r1, #1
 8000c14:	2005      	movs	r0, #5
 8000c16:	f7ff fcfd 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(6, GPIO_PIN_SET);
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	2006      	movs	r0, #6
 8000c1e:	f7ff fcf9 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(7, GPIO_PIN_SET);
 8000c22:	2101      	movs	r1, #1
 8000c24:	2007      	movs	r0, #7
 8000c26:	f7ff fcf5 	bl	8000614 <turn_on_pin_seg0>
 8000c2a:	e03e      	b.n	8000caa <display7SEG+0x526>
		}
		else if (num == 8)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d11c      	bne.n	8000c6c <display7SEG+0x4e8>
		{
			turn_on_pin_seg0(1, GPIO_PIN_RESET);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff fced 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(2, GPIO_PIN_RESET);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f7ff fce9 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(3, GPIO_PIN_RESET);
 8000c42:	2100      	movs	r1, #0
 8000c44:	2003      	movs	r0, #3
 8000c46:	f7ff fce5 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(4, GPIO_PIN_RESET);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2004      	movs	r0, #4
 8000c4e:	f7ff fce1 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(5, GPIO_PIN_RESET);
 8000c52:	2100      	movs	r1, #0
 8000c54:	2005      	movs	r0, #5
 8000c56:	f7ff fcdd 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(6, GPIO_PIN_RESET);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2006      	movs	r0, #6
 8000c5e:	f7ff fcd9 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(7, GPIO_PIN_RESET);
 8000c62:	2100      	movs	r1, #0
 8000c64:	2007      	movs	r0, #7
 8000c66:	f7ff fcd5 	bl	8000614 <turn_on_pin_seg0>
 8000c6a:	e01e      	b.n	8000caa <display7SEG+0x526>
		}
		else if (num == 9)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	2b09      	cmp	r3, #9
 8000c70:	d11b      	bne.n	8000caa <display7SEG+0x526>
		{
			turn_on_pin_seg0(1, GPIO_PIN_RESET);
 8000c72:	2100      	movs	r1, #0
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff fccd 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(2, GPIO_PIN_RESET);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	f7ff fcc9 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(3, GPIO_PIN_RESET);
 8000c82:	2100      	movs	r1, #0
 8000c84:	2003      	movs	r0, #3
 8000c86:	f7ff fcc5 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(4, GPIO_PIN_RESET);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2004      	movs	r0, #4
 8000c8e:	f7ff fcc1 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(5, GPIO_PIN_SET);
 8000c92:	2101      	movs	r1, #1
 8000c94:	2005      	movs	r0, #5
 8000c96:	f7ff fcbd 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(6, GPIO_PIN_RESET);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2006      	movs	r0, #6
 8000c9e:	f7ff fcb9 	bl	8000614 <turn_on_pin_seg0>
			turn_on_pin_seg0(7, GPIO_PIN_RESET);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2007      	movs	r0, #7
 8000ca6:	f7ff fcb5 	bl	8000614 <turn_on_pin_seg0>
		}
	}
	if (seg == SEG1)
 8000caa:	4ba4      	ldr	r3, [pc, #656]	; (8000f3c <display7SEG+0x7b8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f040 813f 	bne.w	8000f34 <display7SEG+0x7b0>
	{
		if (num == 0)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d11c      	bne.n	8000cf6 <display7SEG+0x572>
		{
			turn_on_pin_seg1(1, GPIO_PIN_RESET);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f7ff fd00 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(2, GPIO_PIN_RESET);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f7ff fcfc 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(3, GPIO_PIN_RESET);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f7ff fcf8 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(4, GPIO_PIN_RESET);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2004      	movs	r0, #4
 8000cd8:	f7ff fcf4 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(5, GPIO_PIN_RESET);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2005      	movs	r0, #5
 8000ce0:	f7ff fcf0 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(6, GPIO_PIN_RESET);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2006      	movs	r0, #6
 8000ce8:	f7ff fcec 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(7, GPIO_PIN_SET);
 8000cec:	2101      	movs	r1, #1
 8000cee:	2007      	movs	r0, #7
 8000cf0:	f7ff fce8 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(6, GPIO_PIN_RESET);
			turn_on_pin_seg1(7, GPIO_PIN_RESET);
		}
	}

}
 8000cf4:	e11e      	b.n	8000f34 <display7SEG+0x7b0>
		else if (num == 1)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d11c      	bne.n	8000d36 <display7SEG+0x5b2>
			turn_on_pin_seg1(1, GPIO_PIN_SET);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff fce0 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(2, GPIO_PIN_RESET);
 8000d04:	2100      	movs	r1, #0
 8000d06:	2002      	movs	r0, #2
 8000d08:	f7ff fcdc 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(3, GPIO_PIN_RESET);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2003      	movs	r0, #3
 8000d10:	f7ff fcd8 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(4, GPIO_PIN_SET);
 8000d14:	2101      	movs	r1, #1
 8000d16:	2004      	movs	r0, #4
 8000d18:	f7ff fcd4 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(5, GPIO_PIN_SET);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2005      	movs	r0, #5
 8000d20:	f7ff fcd0 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(6, GPIO_PIN_SET);
 8000d24:	2101      	movs	r1, #1
 8000d26:	2006      	movs	r0, #6
 8000d28:	f7ff fccc 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(7, GPIO_PIN_SET);
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2007      	movs	r0, #7
 8000d30:	f7ff fcc8 	bl	80006c4 <turn_on_pin_seg1>
}
 8000d34:	e0fe      	b.n	8000f34 <display7SEG+0x7b0>
		else if (num == 2)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d11c      	bne.n	8000d76 <display7SEG+0x5f2>
			turn_on_pin_seg1(1, GPIO_PIN_RESET);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff fcc0 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(2, GPIO_PIN_RESET);
 8000d44:	2100      	movs	r1, #0
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff fcbc 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(3, GPIO_PIN_SET);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f7ff fcb8 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(4, GPIO_PIN_RESET);
 8000d54:	2100      	movs	r1, #0
 8000d56:	2004      	movs	r0, #4
 8000d58:	f7ff fcb4 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(5, GPIO_PIN_RESET);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2005      	movs	r0, #5
 8000d60:	f7ff fcb0 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(6, GPIO_PIN_SET);
 8000d64:	2101      	movs	r1, #1
 8000d66:	2006      	movs	r0, #6
 8000d68:	f7ff fcac 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(7, GPIO_PIN_RESET);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2007      	movs	r0, #7
 8000d70:	f7ff fca8 	bl	80006c4 <turn_on_pin_seg1>
}
 8000d74:	e0de      	b.n	8000f34 <display7SEG+0x7b0>
		else if (num == 3)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d11c      	bne.n	8000db6 <display7SEG+0x632>
			turn_on_pin_seg1(1, GPIO_PIN_RESET);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f7ff fca0 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(2, GPIO_PIN_RESET);
 8000d84:	2100      	movs	r1, #0
 8000d86:	2002      	movs	r0, #2
 8000d88:	f7ff fc9c 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(3, GPIO_PIN_RESET);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f7ff fc98 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(4, GPIO_PIN_RESET);
 8000d94:	2100      	movs	r1, #0
 8000d96:	2004      	movs	r0, #4
 8000d98:	f7ff fc94 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(5, GPIO_PIN_SET);
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fc90 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(6, GPIO_PIN_SET);
 8000da4:	2101      	movs	r1, #1
 8000da6:	2006      	movs	r0, #6
 8000da8:	f7ff fc8c 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(7, GPIO_PIN_RESET);
 8000dac:	2100      	movs	r1, #0
 8000dae:	2007      	movs	r0, #7
 8000db0:	f7ff fc88 	bl	80006c4 <turn_on_pin_seg1>
}
 8000db4:	e0be      	b.n	8000f34 <display7SEG+0x7b0>
		else if (num == 4)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d11c      	bne.n	8000df6 <display7SEG+0x672>
			turn_on_pin_seg1(1, GPIO_PIN_SET);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff fc80 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(2, GPIO_PIN_RESET);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f7ff fc7c 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(3, GPIO_PIN_RESET);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f7ff fc78 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(4, GPIO_PIN_SET);
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2004      	movs	r0, #4
 8000dd8:	f7ff fc74 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(5, GPIO_PIN_SET);
 8000ddc:	2101      	movs	r1, #1
 8000dde:	2005      	movs	r0, #5
 8000de0:	f7ff fc70 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(6, GPIO_PIN_RESET);
 8000de4:	2100      	movs	r1, #0
 8000de6:	2006      	movs	r0, #6
 8000de8:	f7ff fc6c 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(7, GPIO_PIN_RESET);
 8000dec:	2100      	movs	r1, #0
 8000dee:	2007      	movs	r0, #7
 8000df0:	f7ff fc68 	bl	80006c4 <turn_on_pin_seg1>
}
 8000df4:	e09e      	b.n	8000f34 <display7SEG+0x7b0>
		else if (num == 5)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d11c      	bne.n	8000e36 <display7SEG+0x6b2>
			turn_on_pin_seg1(1, GPIO_PIN_RESET);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff fc60 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(2, GPIO_PIN_SET);
 8000e04:	2101      	movs	r1, #1
 8000e06:	2002      	movs	r0, #2
 8000e08:	f7ff fc5c 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(3, GPIO_PIN_RESET);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f7ff fc58 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(4, GPIO_PIN_RESET);
 8000e14:	2100      	movs	r1, #0
 8000e16:	2004      	movs	r0, #4
 8000e18:	f7ff fc54 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(5, GPIO_PIN_SET);
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	2005      	movs	r0, #5
 8000e20:	f7ff fc50 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(6, GPIO_PIN_RESET);
 8000e24:	2100      	movs	r1, #0
 8000e26:	2006      	movs	r0, #6
 8000e28:	f7ff fc4c 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(7, GPIO_PIN_RESET);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2007      	movs	r0, #7
 8000e30:	f7ff fc48 	bl	80006c4 <turn_on_pin_seg1>
}
 8000e34:	e07e      	b.n	8000f34 <display7SEG+0x7b0>
		else if (num == 6)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2b06      	cmp	r3, #6
 8000e3a:	d11c      	bne.n	8000e76 <display7SEG+0x6f2>
			turn_on_pin_seg1(1, GPIO_PIN_RESET);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff fc40 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(2, GPIO_PIN_SET);
 8000e44:	2101      	movs	r1, #1
 8000e46:	2002      	movs	r0, #2
 8000e48:	f7ff fc3c 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(3, GPIO_PIN_RESET);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f7ff fc38 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(4, GPIO_PIN_RESET);
 8000e54:	2100      	movs	r1, #0
 8000e56:	2004      	movs	r0, #4
 8000e58:	f7ff fc34 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(5, GPIO_PIN_RESET);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f7ff fc30 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(6, GPIO_PIN_RESET);
 8000e64:	2100      	movs	r1, #0
 8000e66:	2006      	movs	r0, #6
 8000e68:	f7ff fc2c 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(7, GPIO_PIN_RESET);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2007      	movs	r0, #7
 8000e70:	f7ff fc28 	bl	80006c4 <turn_on_pin_seg1>
}
 8000e74:	e05e      	b.n	8000f34 <display7SEG+0x7b0>
		else if (num == 7)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b07      	cmp	r3, #7
 8000e7a:	d11c      	bne.n	8000eb6 <display7SEG+0x732>
			turn_on_pin_seg1(1, GPIO_PIN_RESET);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fc20 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(2, GPIO_PIN_RESET);
 8000e84:	2100      	movs	r1, #0
 8000e86:	2002      	movs	r0, #2
 8000e88:	f7ff fc1c 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(3, GPIO_PIN_RESET);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f7ff fc18 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(4, GPIO_PIN_SET);
 8000e94:	2101      	movs	r1, #1
 8000e96:	2004      	movs	r0, #4
 8000e98:	f7ff fc14 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(5, GPIO_PIN_SET);
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f7ff fc10 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(6, GPIO_PIN_SET);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2006      	movs	r0, #6
 8000ea8:	f7ff fc0c 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(7, GPIO_PIN_SET);
 8000eac:	2101      	movs	r1, #1
 8000eae:	2007      	movs	r0, #7
 8000eb0:	f7ff fc08 	bl	80006c4 <turn_on_pin_seg1>
}
 8000eb4:	e03e      	b.n	8000f34 <display7SEG+0x7b0>
		else if (num == 8)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d11c      	bne.n	8000ef6 <display7SEG+0x772>
			turn_on_pin_seg1(1, GPIO_PIN_RESET);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f7ff fc00 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(2, GPIO_PIN_RESET);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f7ff fbfc 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(3, GPIO_PIN_RESET);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f7ff fbf8 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(4, GPIO_PIN_RESET);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2004      	movs	r0, #4
 8000ed8:	f7ff fbf4 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(5, GPIO_PIN_RESET);
 8000edc:	2100      	movs	r1, #0
 8000ede:	2005      	movs	r0, #5
 8000ee0:	f7ff fbf0 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(6, GPIO_PIN_RESET);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2006      	movs	r0, #6
 8000ee8:	f7ff fbec 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(7, GPIO_PIN_RESET);
 8000eec:	2100      	movs	r1, #0
 8000eee:	2007      	movs	r0, #7
 8000ef0:	f7ff fbe8 	bl	80006c4 <turn_on_pin_seg1>
}
 8000ef4:	e01e      	b.n	8000f34 <display7SEG+0x7b0>
		else if (num == 9)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2b09      	cmp	r3, #9
 8000efa:	d11b      	bne.n	8000f34 <display7SEG+0x7b0>
			turn_on_pin_seg1(1, GPIO_PIN_RESET);
 8000efc:	2100      	movs	r1, #0
 8000efe:	2001      	movs	r0, #1
 8000f00:	f7ff fbe0 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(2, GPIO_PIN_RESET);
 8000f04:	2100      	movs	r1, #0
 8000f06:	2002      	movs	r0, #2
 8000f08:	f7ff fbdc 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(3, GPIO_PIN_RESET);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f7ff fbd8 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(4, GPIO_PIN_RESET);
 8000f14:	2100      	movs	r1, #0
 8000f16:	2004      	movs	r0, #4
 8000f18:	f7ff fbd4 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(5, GPIO_PIN_SET);
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	2005      	movs	r0, #5
 8000f20:	f7ff fbd0 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(6, GPIO_PIN_RESET);
 8000f24:	2100      	movs	r1, #0
 8000f26:	2006      	movs	r0, #6
 8000f28:	f7ff fbcc 	bl	80006c4 <turn_on_pin_seg1>
			turn_on_pin_seg1(7, GPIO_PIN_RESET);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2007      	movs	r0, #7
 8000f30:	f7ff fbc8 	bl	80006c4 <turn_on_pin_seg1>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000024 	.word	0x20000024

08000f40 <display_value>:

void display_value()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
	int digit_tens;
	int digit_ones;
	if(temp_change <= 9 && temp_change >= 0)
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <display_value+0x94>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b09      	cmp	r3, #9
 8000f4c:	dc12      	bgt.n	8000f74 <display_value+0x34>
 8000f4e:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <display_value+0x94>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0e      	blt.n	8000f74 <display_value+0x34>
	{
		display7SEG(SEG0, 0);
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <display_value+0x98>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fc11 	bl	8000784 <display7SEG>
		display7SEG(SEG1, temp_change);
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <display_value+0x9c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <display_value+0x94>)
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fc09 	bl	8000784 <display7SEG>
		digit_tens = temp_change/10;
		digit_ones = temp_change%10;
		display7SEG(SEG0, digit_tens);
		display7SEG(SEG1, digit_ones);
	}
}
 8000f72:	e02a      	b.n	8000fca <display_value+0x8a>
	else if(temp_change >= 10 && temp_change <= 99)
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <display_value+0x94>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	dd26      	ble.n	8000fca <display_value+0x8a>
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <display_value+0x94>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b63      	cmp	r3, #99	; 0x63
 8000f82:	dc22      	bgt.n	8000fca <display_value+0x8a>
		digit_tens = temp_change/10;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <display_value+0x94>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <display_value+0xa0>)
 8000f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8e:	1092      	asrs	r2, r2, #2
 8000f90:	17db      	asrs	r3, r3, #31
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	607b      	str	r3, [r7, #4]
		digit_ones = temp_change%10;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <display_value+0x94>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <display_value+0xa0>)
 8000f9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000fa0:	1099      	asrs	r1, r3, #2
 8000fa2:	17d3      	asrs	r3, r2, #31
 8000fa4:	1ac9      	subs	r1, r1, r3
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	603b      	str	r3, [r7, #0]
		display7SEG(SEG0, digit_tens);
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <display_value+0x98>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fbe3 	bl	8000784 <display7SEG>
		display7SEG(SEG1, digit_ones);
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <display_value+0x9c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6839      	ldr	r1, [r7, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fbdd 	bl	8000784 <display7SEG>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000006c 	.word	0x2000006c
 8000fd8:	20000020 	.word	0x20000020
 8000fdc:	20000024 	.word	0x20000024
 8000fe0:	66666667 	.word	0x66666667

08000fe4 <turn_off_display_value>:
void turn_off_display_value()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

	display7SEG(SEG0, 0);
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <turn_off_display_value+0x20>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fbc8 	bl	8000784 <display7SEG>
	display7SEG(SEG1, 0);
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <turn_off_display_value+0x24>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fbc2 	bl	8000784 <display7SEG>

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000020 	.word	0x20000020
 8001008:	20000024 	.word	0x20000024

0800100c <choosing_red_value>:

void choosing_red_value()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	if(increment_value_flag | increment_value_every_500ms_flag)
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <choosing_red_value+0x34>)
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <choosing_red_value+0x38>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4313      	orrs	r3, r2
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00a      	beq.n	8001036 <choosing_red_value+0x2a>
	{
		temp_change++;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <choosing_red_value+0x3c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <choosing_red_value+0x3c>)
 8001028:	6013      	str	r3, [r2, #0]
		increment_value_flag = 0;
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <choosing_red_value+0x34>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
		increment_value_every_500ms_flag = 0;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <choosing_red_value+0x38>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
	}
	display_value();
 8001036:	f7ff ff83 	bl	8000f40 <display_value>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000073 	.word	0x20000073
 8001044:	20000074 	.word	0x20000074
 8001048:	2000006c 	.word	0x2000006c

0800104c <choosing_yellow_value>:

void choosing_yellow_value()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	if(increment_value_flag | increment_value_every_500ms_flag)
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <choosing_yellow_value+0x34>)
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <choosing_yellow_value+0x38>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4313      	orrs	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00a      	beq.n	8001076 <choosing_yellow_value+0x2a>
	{
		temp_change++;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <choosing_yellow_value+0x3c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <choosing_yellow_value+0x3c>)
 8001068:	6013      	str	r3, [r2, #0]
		increment_value_flag = 0;
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <choosing_yellow_value+0x34>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
		increment_value_every_500ms_flag = 0;
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <choosing_yellow_value+0x38>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
	}
	display_value();
 8001076:	f7ff ff63 	bl	8000f40 <display_value>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000073 	.word	0x20000073
 8001084:	20000074 	.word	0x20000074
 8001088:	2000006c 	.word	0x2000006c

0800108c <choosing_green_value>:

void choosing_green_value()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	if(increment_value_flag | increment_value_every_500ms_flag)
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <choosing_green_value+0x34>)
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <choosing_green_value+0x38>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4313      	orrs	r3, r2
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00a      	beq.n	80010b6 <choosing_green_value+0x2a>
	{
		temp_change++;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <choosing_green_value+0x3c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <choosing_green_value+0x3c>)
 80010a8:	6013      	str	r3, [r2, #0]
		increment_value_flag = 0;
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <choosing_green_value+0x34>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
		increment_value_every_500ms_flag = 0;
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <choosing_green_value+0x38>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
	}
	display_value();
 80010b6:	f7ff ff43 	bl	8000f40 <display_value>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000073 	.word	0x20000073
 80010c4:	20000074 	.word	0x20000074
 80010c8:	2000006c 	.word	0x2000006c

080010cc <save_red_value>:

void save_red_value()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	red_light = temp_change;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <save_red_value+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <save_red_value+0x18>)
 80010d6:	6013      	str	r3, [r2, #0]
	turn_off_display_value();
 80010d8:	f7ff ff84 	bl	8000fe4 <turn_off_display_value>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000006c 	.word	0x2000006c
 80010e4:	20000004 	.word	0x20000004

080010e8 <save_yellow_value>:

void save_yellow_value()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	yellow_light = temp_change;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <save_yellow_value+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a03      	ldr	r2, [pc, #12]	; (8001100 <save_yellow_value+0x18>)
 80010f2:	6013      	str	r3, [r2, #0]
	turn_off_display_value();
 80010f4:	f7ff ff76 	bl	8000fe4 <turn_off_display_value>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2000006c 	.word	0x2000006c
 8001100:	2000000c 	.word	0x2000000c

08001104 <save_green_value>:

void save_green_value()
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	green_light = temp_change;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <save_green_value+0x44>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0f      	ldr	r2, [pc, #60]	; (800114c <save_green_value+0x48>)
 800110e:	6013      	str	r3, [r2, #0]
	counter = green_light + 1;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <save_green_value+0x48>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <save_green_value+0x4c>)
 8001118:	6013      	str	r3, [r2, #0]
	light1 = red_light + 1;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <save_green_value+0x50>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <save_green_value+0x54>)
 8001122:	6013      	str	r3, [r2, #0]
	light2 = red_light - green_light;
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <save_green_value+0x50>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <save_green_value+0x48>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <save_green_value+0x58>)
 8001130:	6013      	str	r3, [r2, #0]
	current_traffic_state = RED1_GREEN2;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <save_green_value+0x5c>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
	next_traffic_state = RED1_GREEN2;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <save_green_value+0x60>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	2000006c 	.word	0x2000006c
 800114c:	20000008 	.word	0x20000008
 8001150:	20000010 	.word	0x20000010
 8001154:	20000004 	.word	0x20000004
 8001158:	20000014 	.word	0x20000014
 800115c:	20000018 	.word	0x20000018
 8001160:	20000069 	.word	0x20000069
 8001164:	2000006a 	.word	0x2000006a

08001168 <blink_all_red>:

void blink_all_red()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	if(timer1_flag)
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <blink_all_red+0x54>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <blink_all_red+0x1a>
	{
		HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 8001174:	2108      	movs	r1, #8
 8001176:	4812      	ldr	r0, [pc, #72]	; (80011c0 <blink_all_red+0x58>)
 8001178:	f000 ffc9 	bl	800210e <HAL_GPIO_TogglePin>
		setTimerBlinking(250);
 800117c:	20fa      	movs	r0, #250	; 0xfa
 800117e:	f7ff f973 	bl	8000468 <setTimerBlinking>
	}
	HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	2110      	movs	r1, #16
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <blink_all_red+0x58>)
 8001188:	f000 ffa9 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2120      	movs	r1, #32
 8001190:	480b      	ldr	r0, [pc, #44]	; (80011c0 <blink_all_red+0x58>)
 8001192:	f000 ffa4 	bl	80020de <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <blink_all_red+0x58>)
 800119c:	f000 ff9f 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	4806      	ldr	r0, [pc, #24]	; (80011c0 <blink_all_red+0x58>)
 80011a6:	f000 ff9a 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <blink_all_red+0x58>)
 80011b2:	f000 ff94 	bl	80020de <HAL_GPIO_WritePin>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000084 	.word	0x20000084
 80011c0:	40010c00 	.word	0x40010c00

080011c4 <blink_all_ambient>:

void blink_all_ambient()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	if(timer1_flag)
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <blink_all_ambient+0x54>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <blink_all_ambient+0x1a>
	{
		HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 80011d0:	2110      	movs	r1, #16
 80011d2:	4812      	ldr	r0, [pc, #72]	; (800121c <blink_all_ambient+0x58>)
 80011d4:	f000 ff9b 	bl	800210e <HAL_GPIO_TogglePin>
		setTimerBlinking(250);
 80011d8:	20fa      	movs	r0, #250	; 0xfa
 80011da:	f7ff f945 	bl	8000468 <setTimerBlinking>
	}
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2108      	movs	r1, #8
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <blink_all_ambient+0x58>)
 80011e4:	f000 ff7b 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <blink_all_ambient+0x58>)
 80011ee:	f000 ff76 	bl	80020de <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2140      	movs	r1, #64	; 0x40
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <blink_all_ambient+0x58>)
 80011f8:	f000 ff71 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <blink_all_ambient+0x58>)
 8001202:	f000 ff6c 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <blink_all_ambient+0x58>)
 800120e:	f000 ff66 	bl	80020de <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000084 	.word	0x20000084
 800121c:	40010c00 	.word	0x40010c00

08001220 <blink_all_green>:

void blink_all_green()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	if(timer1_flag)
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <blink_all_green+0x54>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d006      	beq.n	800123a <blink_all_green+0x1a>
	{
		HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 800122c:	2120      	movs	r1, #32
 800122e:	4812      	ldr	r0, [pc, #72]	; (8001278 <blink_all_green+0x58>)
 8001230:	f000 ff6d 	bl	800210e <HAL_GPIO_TogglePin>
		setTimerBlinking(250);
 8001234:	20fa      	movs	r0, #250	; 0xfa
 8001236:	f7ff f917 	bl	8000468 <setTimerBlinking>
	}
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2108      	movs	r1, #8
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <blink_all_green+0x58>)
 8001240:	f000 ff4d 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2110      	movs	r1, #16
 8001248:	480b      	ldr	r0, [pc, #44]	; (8001278 <blink_all_green+0x58>)
 800124a:	f000 ff48 	bl	80020de <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2140      	movs	r1, #64	; 0x40
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <blink_all_green+0x58>)
 8001254:	f000 ff43 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <blink_all_green+0x58>)
 800125e:	f000 ff3e 	bl	80020de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <blink_all_green+0x58>)
 800126a:	f000 ff38 	bl	80020de <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000084 	.word	0x20000084
 8001278:	40010c00 	.word	0x40010c00

0800127c <display_mode>:
void display_mode(int mode)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	display7SEG(TRAFFIC, mode);
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <display_mode+0x1c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fa7a 	bl	8000784 <display7SEG>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000090 	.word	0x20000090

0800129c <clear_all_flag>:

void clear_all_flag()
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	choosing_value_mode_flag = 0;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <clear_all_flag+0x2c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
	changing_mode_flag = 0;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <clear_all_flag+0x30>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
	value_chosen_flag = 0;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <clear_all_flag+0x34>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
	increment_value_flag = 0;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <clear_all_flag+0x38>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
	increment_value_every_500ms_flag = 0;
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <clear_all_flag+0x3c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000070 	.word	0x20000070
 80012cc:	20000071 	.word	0x20000071
 80012d0:	20000072 	.word	0x20000072
 80012d4:	20000073 	.word	0x20000073
 80012d8:	20000074 	.word	0x20000074

080012dc <turnonTraffigLights>:
void turnonTraffigLights(int state)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	f200 808c 	bhi.w	8001404 <turnonTraffigLights+0x128>
 80012ec:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <turnonTraffigLights+0x18>)
 80012ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f2:	bf00      	nop
 80012f4:	08001305 	.word	0x08001305
 80012f8:	08001345 	.word	0x08001345
 80012fc:	08001385 	.word	0x08001385
 8001300:	080013c5 	.word	0x080013c5
	  switch (state) {
	    case RED1_GREEN2:
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);//Turn on LED RED1
 8001304:	2200      	movs	r2, #0
 8001306:	2108      	movs	r1, #8
 8001308:	4840      	ldr	r0, [pc, #256]	; (800140c <turnonTraffigLights+0x130>)
 800130a:	f000 fee8 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);//Turn off LED YELLOW1
 800130e:	2201      	movs	r2, #1
 8001310:	2110      	movs	r1, #16
 8001312:	483e      	ldr	r0, [pc, #248]	; (800140c <turnonTraffigLights+0x130>)
 8001314:	f000 fee3 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);//Turn off LED GREEN1
 8001318:	2201      	movs	r2, #1
 800131a:	2120      	movs	r1, #32
 800131c:	483b      	ldr	r0, [pc, #236]	; (800140c <turnonTraffigLights+0x130>)
 800131e:	f000 fede 	bl	80020de <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);//Turn off LED RED2
 8001322:	2201      	movs	r2, #1
 8001324:	2140      	movs	r1, #64	; 0x40
 8001326:	4839      	ldr	r0, [pc, #228]	; (800140c <turnonTraffigLights+0x130>)
 8001328:	f000 fed9 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);//Turn off LED YELLOW2
 800132c:	2201      	movs	r2, #1
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	4836      	ldr	r0, [pc, #216]	; (800140c <turnonTraffigLights+0x130>)
 8001332:	f000 fed4 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);//Turn on LED GREEN2
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800133c:	4833      	ldr	r0, [pc, #204]	; (800140c <turnonTraffigLights+0x130>)
 800133e:	f000 fece 	bl	80020de <HAL_GPIO_WritePin>
	    	break;
 8001342:	e05f      	b.n	8001404 <turnonTraffigLights+0x128>
	    case RED1_YELLOW2:
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);//Turn on LED RED1
 8001344:	2200      	movs	r2, #0
 8001346:	2108      	movs	r1, #8
 8001348:	4830      	ldr	r0, [pc, #192]	; (800140c <turnonTraffigLights+0x130>)
 800134a:	f000 fec8 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);//Turn off LED YELLOW1
 800134e:	2201      	movs	r2, #1
 8001350:	2110      	movs	r1, #16
 8001352:	482e      	ldr	r0, [pc, #184]	; (800140c <turnonTraffigLights+0x130>)
 8001354:	f000 fec3 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);//Turn off LED GREEN1
 8001358:	2201      	movs	r2, #1
 800135a:	2120      	movs	r1, #32
 800135c:	482b      	ldr	r0, [pc, #172]	; (800140c <turnonTraffigLights+0x130>)
 800135e:	f000 febe 	bl	80020de <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);//Turn off LED RED2
 8001362:	2201      	movs	r2, #1
 8001364:	2140      	movs	r1, #64	; 0x40
 8001366:	4829      	ldr	r0, [pc, #164]	; (800140c <turnonTraffigLights+0x130>)
 8001368:	f000 feb9 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);//Turn on LED YELLOW2
 800136c:	2200      	movs	r2, #0
 800136e:	2180      	movs	r1, #128	; 0x80
 8001370:	4826      	ldr	r0, [pc, #152]	; (800140c <turnonTraffigLights+0x130>)
 8001372:	f000 feb4 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);//Turn off LED GREEN2
 8001376:	2201      	movs	r2, #1
 8001378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137c:	4823      	ldr	r0, [pc, #140]	; (800140c <turnonTraffigLights+0x130>)
 800137e:	f000 feae 	bl	80020de <HAL_GPIO_WritePin>
	    	break;
 8001382:	e03f      	b.n	8001404 <turnonTraffigLights+0x128>
	    case GREEN1_RED2:
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);//Turn off LED RED
 8001384:	2201      	movs	r2, #1
 8001386:	2108      	movs	r1, #8
 8001388:	4820      	ldr	r0, [pc, #128]	; (800140c <turnonTraffigLights+0x130>)
 800138a:	f000 fea8 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);//Turn off LED YELLOW
 800138e:	2201      	movs	r2, #1
 8001390:	2110      	movs	r1, #16
 8001392:	481e      	ldr	r0, [pc, #120]	; (800140c <turnonTraffigLights+0x130>)
 8001394:	f000 fea3 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);//Turn on LED GREEN
 8001398:	2200      	movs	r2, #0
 800139a:	2120      	movs	r1, #32
 800139c:	481b      	ldr	r0, [pc, #108]	; (800140c <turnonTraffigLights+0x130>)
 800139e:	f000 fe9e 	bl	80020de <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);//Turn on LED RED2
 80013a2:	2200      	movs	r2, #0
 80013a4:	2140      	movs	r1, #64	; 0x40
 80013a6:	4819      	ldr	r0, [pc, #100]	; (800140c <turnonTraffigLights+0x130>)
 80013a8:	f000 fe99 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);//Turn off LED YELLOW2
 80013ac:	2201      	movs	r2, #1
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	4816      	ldr	r0, [pc, #88]	; (800140c <turnonTraffigLights+0x130>)
 80013b2:	f000 fe94 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);//Turn off LED GREEN2
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013bc:	4813      	ldr	r0, [pc, #76]	; (800140c <turnonTraffigLights+0x130>)
 80013be:	f000 fe8e 	bl	80020de <HAL_GPIO_WritePin>
	    	break;
 80013c2:	e01f      	b.n	8001404 <turnonTraffigLights+0x128>
	    case YELLOW1_RED2:
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);//Turn off LED RED
 80013c4:	2201      	movs	r2, #1
 80013c6:	2108      	movs	r1, #8
 80013c8:	4810      	ldr	r0, [pc, #64]	; (800140c <turnonTraffigLights+0x130>)
 80013ca:	f000 fe88 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);//Turn on LED YELLOW
 80013ce:	2200      	movs	r2, #0
 80013d0:	2110      	movs	r1, #16
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <turnonTraffigLights+0x130>)
 80013d4:	f000 fe83 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);//Turn off LED GREEN
 80013d8:	2201      	movs	r2, #1
 80013da:	2120      	movs	r1, #32
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <turnonTraffigLights+0x130>)
 80013de:	f000 fe7e 	bl	80020de <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);//Turn off LED RED1
 80013e2:	2200      	movs	r2, #0
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <turnonTraffigLights+0x130>)
 80013e8:	f000 fe79 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);//Turn on LED YELLOW1
 80013ec:	2201      	movs	r2, #1
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	4806      	ldr	r0, [pc, #24]	; (800140c <turnonTraffigLights+0x130>)
 80013f2:	f000 fe74 	bl	80020de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);//Turn off LED GREEN1
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <turnonTraffigLights+0x130>)
 80013fe:	f000 fe6e 	bl	80020de <HAL_GPIO_WritePin>
	    	break;
 8001402:	bf00      	nop
	  }
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40010c00 	.word	0x40010c00

08001410 <displayTrafficLight1>:

void displayTrafficLight1(int light1)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	display7SEG(TRAFFIC, light1);
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <displayTrafficLight1+0x1c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f9b0 	bl	8000784 <display7SEG>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000090 	.word	0x20000090

08001430 <traffic_light_running>:

void traffic_light_running()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	  displayTrafficLight1(light1);
 8001434:	4b6b      	ldr	r3, [pc, #428]	; (80015e4 <traffic_light_running+0x1b4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ffe9 	bl	8001410 <displayTrafficLight1>
	  switch (current_traffic_state) {
 800143e:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <traffic_light_running+0x1b8>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b03      	cmp	r3, #3
 8001444:	f200 80c8 	bhi.w	80015d8 <traffic_light_running+0x1a8>
 8001448:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <traffic_light_running+0x20>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	08001461 	.word	0x08001461
 8001454:	080014b7 	.word	0x080014b7
 8001458:	08001513 	.word	0x08001513
 800145c:	0800156f 	.word	0x0800156f
	    case RED1_GREEN2:
	    	turnonTraffigLights(RED1_GREEN2);
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff ff3b 	bl	80012dc <turnonTraffigLights>
	      	if(timer2_flag)
 8001466:	4b61      	ldr	r3, [pc, #388]	; (80015ec <traffic_light_running+0x1bc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d012      	beq.n	8001494 <traffic_light_running+0x64>
	      	{
	    	    	counter--;
 800146e:	4b60      	ldr	r3, [pc, #384]	; (80015f0 <traffic_light_running+0x1c0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3b01      	subs	r3, #1
 8001474:	4a5e      	ldr	r2, [pc, #376]	; (80015f0 <traffic_light_running+0x1c0>)
 8001476:	6013      	str	r3, [r2, #0]
	    	    	light1--;
 8001478:	4b5a      	ldr	r3, [pc, #360]	; (80015e4 <traffic_light_running+0x1b4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	4a59      	ldr	r2, [pc, #356]	; (80015e4 <traffic_light_running+0x1b4>)
 8001480:	6013      	str	r3, [r2, #0]
	    	    	light2--;
 8001482:	4b5c      	ldr	r3, [pc, #368]	; (80015f4 <traffic_light_running+0x1c4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3b01      	subs	r3, #1
 8001488:	4a5a      	ldr	r2, [pc, #360]	; (80015f4 <traffic_light_running+0x1c4>)
 800148a:	6013      	str	r3, [r2, #0]
	    	    	setTimer1s(1000);
 800148c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001490:	f7ff f804 	bl	800049c <setTimer1s>
	      	}
	    	if(counter <= 0)
 8001494:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <traffic_light_running+0x1c0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f300 8096 	bgt.w	80015ca <traffic_light_running+0x19a>
	    	{
	    		next_traffic_state = RED1_YELLOW2;
 800149e:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <traffic_light_running+0x1c8>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
	    		light2 = yellow_light;
 80014a4:	4b55      	ldr	r3, [pc, #340]	; (80015fc <traffic_light_running+0x1cc>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <traffic_light_running+0x1c4>)
 80014aa:	6013      	str	r3, [r2, #0]
	    		counter = yellow_light;
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <traffic_light_running+0x1cc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a4f      	ldr	r2, [pc, #316]	; (80015f0 <traffic_light_running+0x1c0>)
 80014b2:	6013      	str	r3, [r2, #0]
	    	}
	    	break;
 80014b4:	e089      	b.n	80015ca <traffic_light_running+0x19a>
	    case RED1_YELLOW2:
	    	turnonTraffigLights(RED1_YELLOW2);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff ff10 	bl	80012dc <turnonTraffigLights>
	    	if(timer2_flag)
 80014bc:	4b4b      	ldr	r3, [pc, #300]	; (80015ec <traffic_light_running+0x1bc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d012      	beq.n	80014ea <traffic_light_running+0xba>
	    	{
		    	counter--;
 80014c4:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <traffic_light_running+0x1c0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	4a49      	ldr	r2, [pc, #292]	; (80015f0 <traffic_light_running+0x1c0>)
 80014cc:	6013      	str	r3, [r2, #0]
		    	light1--;
 80014ce:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <traffic_light_running+0x1b4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <traffic_light_running+0x1b4>)
 80014d6:	6013      	str	r3, [r2, #0]
		    	light2--;
 80014d8:	4b46      	ldr	r3, [pc, #280]	; (80015f4 <traffic_light_running+0x1c4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4a45      	ldr	r2, [pc, #276]	; (80015f4 <traffic_light_running+0x1c4>)
 80014e0:	6013      	str	r3, [r2, #0]
		    	setTimer1s(1000);
 80014e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e6:	f7fe ffd9 	bl	800049c <setTimer1s>
	    	}
	    	if(counter <= 0)
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <traffic_light_running+0x1c0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	dc6d      	bgt.n	80015ce <traffic_light_running+0x19e>
	    	{
	    		next_traffic_state = GREEN1_RED2;
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <traffic_light_running+0x1c8>)
 80014f4:	2202      	movs	r2, #2
 80014f6:	701a      	strb	r2, [r3, #0]
		    	counter = green_light;
 80014f8:	4b41      	ldr	r3, [pc, #260]	; (8001600 <traffic_light_running+0x1d0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a3c      	ldr	r2, [pc, #240]	; (80015f0 <traffic_light_running+0x1c0>)
 80014fe:	6013      	str	r3, [r2, #0]
		    	light1 = green_light;
 8001500:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <traffic_light_running+0x1d0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a37      	ldr	r2, [pc, #220]	; (80015e4 <traffic_light_running+0x1b4>)
 8001506:	6013      	str	r3, [r2, #0]
		    	light2 = red_light;
 8001508:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <traffic_light_running+0x1d4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a39      	ldr	r2, [pc, #228]	; (80015f4 <traffic_light_running+0x1c4>)
 800150e:	6013      	str	r3, [r2, #0]
	    	}
	    	break;
 8001510:	e05d      	b.n	80015ce <traffic_light_running+0x19e>
	    case GREEN1_RED2:
	    	turnonTraffigLights(GREEN1_RED2);
 8001512:	2002      	movs	r0, #2
 8001514:	f7ff fee2 	bl	80012dc <turnonTraffigLights>
	    	if(timer2_flag)
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <traffic_light_running+0x1bc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d012      	beq.n	8001546 <traffic_light_running+0x116>
	    	{
		    	counter--;
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <traffic_light_running+0x1c0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3b01      	subs	r3, #1
 8001526:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <traffic_light_running+0x1c0>)
 8001528:	6013      	str	r3, [r2, #0]
		    	light1--;
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <traffic_light_running+0x1b4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3b01      	subs	r3, #1
 8001530:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <traffic_light_running+0x1b4>)
 8001532:	6013      	str	r3, [r2, #0]
		    	light2--;
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <traffic_light_running+0x1c4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3b01      	subs	r3, #1
 800153a:	4a2e      	ldr	r2, [pc, #184]	; (80015f4 <traffic_light_running+0x1c4>)
 800153c:	6013      	str	r3, [r2, #0]
		    	setTimer1s(1000);
 800153e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001542:	f7fe ffab 	bl	800049c <setTimer1s>
	    	}
	    	if(counter <= 0)
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <traffic_light_running+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	dc41      	bgt.n	80015d2 <traffic_light_running+0x1a2>
	    	{
	    		next_traffic_state = YELLOW1_RED2;
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <traffic_light_running+0x1c8>)
 8001550:	2203      	movs	r2, #3
 8001552:	701a      	strb	r2, [r3, #0]
		    	counter = yellow_light;
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <traffic_light_running+0x1cc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a25      	ldr	r2, [pc, #148]	; (80015f0 <traffic_light_running+0x1c0>)
 800155a:	6013      	str	r3, [r2, #0]
		    	light1 = yellow_light;
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <traffic_light_running+0x1cc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a20      	ldr	r2, [pc, #128]	; (80015e4 <traffic_light_running+0x1b4>)
 8001562:	6013      	str	r3, [r2, #0]
		    	light2 = red_light;
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <traffic_light_running+0x1d4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a22      	ldr	r2, [pc, #136]	; (80015f4 <traffic_light_running+0x1c4>)
 800156a:	6013      	str	r3, [r2, #0]
	    	}
	    	break;
 800156c:	e031      	b.n	80015d2 <traffic_light_running+0x1a2>
	    case YELLOW1_RED2:
	    	turnonTraffigLights(YELLOW1_RED2);
 800156e:	2003      	movs	r0, #3
 8001570:	f7ff feb4 	bl	80012dc <turnonTraffigLights>
	    	if(timer2_flag)
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <traffic_light_running+0x1bc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d012      	beq.n	80015a2 <traffic_light_running+0x172>
	    	{
		    	counter--;
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <traffic_light_running+0x1c0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <traffic_light_running+0x1c0>)
 8001584:	6013      	str	r3, [r2, #0]
		    	light1--;
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <traffic_light_running+0x1b4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3b01      	subs	r3, #1
 800158c:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <traffic_light_running+0x1b4>)
 800158e:	6013      	str	r3, [r2, #0]
		    	light2--;
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <traffic_light_running+0x1c4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3b01      	subs	r3, #1
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <traffic_light_running+0x1c4>)
 8001598:	6013      	str	r3, [r2, #0]
		    	setTimer1s(1000);
 800159a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800159e:	f7fe ff7d 	bl	800049c <setTimer1s>
	    	}
	    	if(counter <= 0)
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <traffic_light_running+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dc15      	bgt.n	80015d6 <traffic_light_running+0x1a6>
	    	{
	    		next_traffic_state = RED1_GREEN2;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <traffic_light_running+0x1c8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
		    	counter = green_light;
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <traffic_light_running+0x1d0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <traffic_light_running+0x1c0>)
 80015b6:	6013      	str	r3, [r2, #0]
		    	light1 = red_light;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <traffic_light_running+0x1d4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <traffic_light_running+0x1b4>)
 80015be:	6013      	str	r3, [r2, #0]
		    	light2 = green_light;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <traffic_light_running+0x1d0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <traffic_light_running+0x1c4>)
 80015c6:	6013      	str	r3, [r2, #0]
	    	}
	    	break;
 80015c8:	e005      	b.n	80015d6 <traffic_light_running+0x1a6>
	    	break;
 80015ca:	bf00      	nop
 80015cc:	e004      	b.n	80015d8 <traffic_light_running+0x1a8>
	    	break;
 80015ce:	bf00      	nop
 80015d0:	e002      	b.n	80015d8 <traffic_light_running+0x1a8>
	    	break;
 80015d2:	bf00      	nop
 80015d4:	e000      	b.n	80015d8 <traffic_light_running+0x1a8>
	    	break;
 80015d6:	bf00      	nop
	  }
	  current_traffic_state = next_traffic_state;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <traffic_light_running+0x1c8>)
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	4b02      	ldr	r3, [pc, #8]	; (80015e8 <traffic_light_running+0x1b8>)
 80015de:	701a      	strb	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000014 	.word	0x20000014
 80015e8:	20000069 	.word	0x20000069
 80015ec:	2000008c 	.word	0x2000008c
 80015f0:	20000010 	.word	0x20000010
 80015f4:	20000018 	.word	0x20000018
 80015f8:	2000006a 	.word	0x2000006a
 80015fc:	2000000c 	.word	0x2000000c
 8001600:	20000008 	.word	0x20000008
 8001604:	20000004 	.word	0x20000004

08001608 <system_running>:
void system_running()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
			  switch (currentState) {
 800160c:	4b48      	ldr	r3, [pc, #288]	; (8001730 <system_running+0x128>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b03      	cmp	r3, #3
 8001612:	f200 8080 	bhi.w	8001716 <system_running+0x10e>
 8001616:	a201      	add	r2, pc, #4	; (adr r2, 800161c <system_running+0x14>)
 8001618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161c:	0800162d 	.word	0x0800162d
 8001620:	08001657 	.word	0x08001657
 8001624:	08001693 	.word	0x08001693
 8001628:	080016cf 	.word	0x080016cf
			  	    case NORMAL:
			  	    	traffic_light_running();
 800162c:	f7ff ff00 	bl	8001430 <traffic_light_running>
			  	    	turn_off_display_value();
 8001630:	f7ff fcd8 	bl	8000fe4 <turn_off_display_value>
			  	    	if(changing_mode_flag)
 8001634:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <system_running+0x12c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d065      	beq.n	8001708 <system_running+0x100>
			  	    	{
			  	    		clear_all_flag();
 800163c:	f7ff fe2e 	bl	800129c <clear_all_flag>
				  	    	temp_change = red_light;
 8001640:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <system_running+0x130>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a3d      	ldr	r2, [pc, #244]	; (800173c <system_running+0x134>)
 8001646:	6013      	str	r3, [r2, #0]
				  	    	setTimerBlinking(250);
 8001648:	20fa      	movs	r0, #250	; 0xfa
 800164a:	f7fe ff0d 	bl	8000468 <setTimerBlinking>
			  	    		nextState  = RED_MODIFIED;
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <system_running+0x138>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
			  	    	}
			  	    	break;
 8001654:	e058      	b.n	8001708 <system_running+0x100>
			  	    case RED_MODIFIED:
			  	    	display_mode(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff fe10 	bl	800127c <display_mode>
			  	    	blink_all_red();
 800165c:	f7ff fd84 	bl	8001168 <blink_all_red>
			  	    	choosing_red_value();
 8001660:	f7ff fcd4 	bl	800100c <choosing_red_value>
			  	    	if(changing_mode_flag)
 8001664:	4b33      	ldr	r3, [pc, #204]	; (8001734 <system_running+0x12c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <system_running+0x76>
			  	    	{
			  	    		clear_all_flag();
 800166c:	f7ff fe16 	bl	800129c <clear_all_flag>
				  	    	temp_change = yellow_light;
 8001670:	4b34      	ldr	r3, [pc, #208]	; (8001744 <system_running+0x13c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a31      	ldr	r2, [pc, #196]	; (800173c <system_running+0x134>)
 8001676:	6013      	str	r3, [r2, #0]
			  	    		nextState  = AMBIENT_MODIFED;
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <system_running+0x138>)
 800167a:	2202      	movs	r2, #2
 800167c:	701a      	strb	r2, [r3, #0]
			  	    	}
			  	    	if(value_chosen_flag)
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <system_running+0x140>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d042      	beq.n	800170c <system_running+0x104>
			  	    	{
			  	    		value_chosen_flag = 0;
 8001686:	4b30      	ldr	r3, [pc, #192]	; (8001748 <system_running+0x140>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
			  	    		save_red_value();
 800168c:	f7ff fd1e 	bl	80010cc <save_red_value>
			  	    	}
			  	    	break;
 8001690:	e03c      	b.n	800170c <system_running+0x104>
			  	    case AMBIENT_MODIFED:
			  	    	display_mode(2);
 8001692:	2002      	movs	r0, #2
 8001694:	f7ff fdf2 	bl	800127c <display_mode>
			  	    	blink_all_ambient();
 8001698:	f7ff fd94 	bl	80011c4 <blink_all_ambient>
			  	    	choosing_yellow_value();
 800169c:	f7ff fcd6 	bl	800104c <choosing_yellow_value>
			  	    	if(changing_mode_flag)
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <system_running+0x12c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <system_running+0xb2>
			  	    	{
			  	    		clear_all_flag();
 80016a8:	f7ff fdf8 	bl	800129c <clear_all_flag>
				  	    	temp_change = green_light;
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <system_running+0x144>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a22      	ldr	r2, [pc, #136]	; (800173c <system_running+0x134>)
 80016b2:	6013      	str	r3, [r2, #0]
			  	    		nextState  = GREEN_MODIFED;
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <system_running+0x138>)
 80016b6:	2203      	movs	r2, #3
 80016b8:	701a      	strb	r2, [r3, #0]
			  	    	}
			  	    	if(value_chosen_flag)
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <system_running+0x140>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d026      	beq.n	8001710 <system_running+0x108>
			  	    	{
			  	    		value_chosen_flag = 0;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <system_running+0x140>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
			  	    		save_yellow_value();
 80016c8:	f7ff fd0e 	bl	80010e8 <save_yellow_value>
			  	    	}
			  	    	break;
 80016cc:	e020      	b.n	8001710 <system_running+0x108>
			  	    case GREEN_MODIFED:
			  	    	display_mode(3);
 80016ce:	2003      	movs	r0, #3
 80016d0:	f7ff fdd4 	bl	800127c <display_mode>
			  	    	blink_all_green();
 80016d4:	f7ff fda4 	bl	8001220 <blink_all_green>
			  	    	choosing_green_value();
 80016d8:	f7ff fcd8 	bl	800108c <choosing_green_value>
			  	    	if(changing_mode_flag)
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <system_running+0x12c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <system_running+0xec>
			  	    	{
			  	    		clear_all_flag();
 80016e4:	f7ff fdda 	bl	800129c <clear_all_flag>
				  	    	temp_change = 0;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <system_running+0x134>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
			  	    		nextState  = NORMAL;
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <system_running+0x138>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
			  	    	}
			  	    	if(value_chosen_flag)
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <system_running+0x140>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00b      	beq.n	8001714 <system_running+0x10c>
			  	    	{
			  	    		value_chosen_flag = 0;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <system_running+0x140>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
			  	    		save_green_value();
 8001702:	f7ff fcff 	bl	8001104 <save_green_value>
			  	    	}
			  	    	break;
 8001706:	e005      	b.n	8001714 <system_running+0x10c>
			  	    	break;
 8001708:	bf00      	nop
 800170a:	e004      	b.n	8001716 <system_running+0x10e>
			  	    	break;
 800170c:	bf00      	nop
 800170e:	e002      	b.n	8001716 <system_running+0x10e>
			  	    	break;
 8001710:	bf00      	nop
 8001712:	e000      	b.n	8001716 <system_running+0x10e>
			  	    	break;
 8001714:	bf00      	nop
		  }
		currentState = nextState;
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <system_running+0x138>)
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <system_running+0x128>)
 800171c:	701a      	strb	r2, [r3, #0]
		  fsm_for_input_processing_0();
 800171e:	f7fe fd15 	bl	800014c <fsm_for_input_processing_0>
		  fsm_for_input_processing_1();
 8001722:	f7fe fd61 	bl	80001e8 <fsm_for_input_processing_1>
		  fsm_for_input_processing_2();
 8001726:	f7fe fda3 	bl	8000270 <fsm_for_input_processing_2>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000075 	.word	0x20000075
 8001734:	20000071 	.word	0x20000071
 8001738:	20000004 	.word	0x20000004
 800173c:	2000006c 	.word	0x2000006c
 8001740:	20000076 	.word	0x20000076
 8001744:	2000000c 	.word	0x2000000c
 8001748:	20000072 	.word	0x20000072
 800174c:	20000008 	.word	0x20000008

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001754:	f000 f9c2 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001758:	f000 f80c 	bl	8001774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175c:	f000 f892 	bl	8001884 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001760:	f000 f844 	bl	80017ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <main+0x20>)
 8001766:	f001 f917 	bl	8002998 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  system_running();
 800176a:	f7ff ff4d 	bl	8001608 <system_running>
 800176e:	e7fc      	b.n	800176a <main+0x1a>
 8001770:	20000094 	.word	0x20000094

08001774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b090      	sub	sp, #64	; 0x40
 8001778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177a:	f107 0318 	add.w	r3, r7, #24
 800177e:	2228      	movs	r2, #40	; 0x28
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fcc4 	bl	8003110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179a:	2301      	movs	r3, #1
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800179e:	2310      	movs	r3, #16
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fcc8 	bl	8002140 <HAL_RCC_OscConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80017b6:	f000 f8d8 	bl	800196a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ba:	230f      	movs	r3, #15
 80017bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 ff34 	bl	8002640 <HAL_RCC_ClockConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80017de:	f000 f8c4 	bl	800196a <Error_Handler>
  }
}
 80017e2:	bf00      	nop
 80017e4:	3740      	adds	r7, #64	; 0x40
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	463b      	mov	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_TIM2_Init+0x94>)
 800180a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800180e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <MX_TIM2_Init+0x94>)
 8001812:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001816:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <MX_TIM2_Init+0x94>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_TIM2_Init+0x94>)
 8001820:	2209      	movs	r2, #9
 8001822:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_TIM2_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_TIM2_Init+0x94>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001830:	4813      	ldr	r0, [pc, #76]	; (8001880 <MX_TIM2_Init+0x94>)
 8001832:	f001 f861 	bl	80028f8 <HAL_TIM_Base_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800183c:	f000 f895 	bl	800196a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_TIM2_Init+0x94>)
 800184e:	f001 f9f7 	bl	8002c40 <HAL_TIM_ConfigClockSource>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001858:	f000 f887 	bl	800196a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_TIM2_Init+0x94>)
 800186a:	f001 fbc3 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001874:	f000 f879 	bl	800196a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000094 	.word	0x20000094

08001884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <MX_GPIO_Init+0xb8>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <MX_GPIO_Init+0xb8>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <MX_GPIO_Init+0xb8>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <MX_GPIO_Init+0xb8>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a21      	ldr	r2, [pc, #132]	; (800193c <MX_GPIO_Init+0xb8>)
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_GPIO_Init+0xb8>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dis0_0_Pin|dis0_1_Pin|dis0_2_Pin|dis0_3_Pin
 80018c8:	2200      	movs	r2, #0
 80018ca:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 80018ce:	481c      	ldr	r0, [pc, #112]	; (8001940 <MX_GPIO_Init+0xbc>)
 80018d0:	f000 fc05 	bl	80020de <HAL_GPIO_WritePin>
                          |dis0_4_Pin|dis0_5_Pin|dis0_6_Pin|dis1_0_Pin
                          |dis1_1_Pin|dis1_2_Pin|dis1_3_Pin|dis1_4_Pin
                          |dis1_5_Pin|dis1_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, traffic1_Pin|traffic2_Pin|traffic3_Pin|traffic4_Pin
 80018d4:	2200      	movs	r2, #0
 80018d6:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 80018da:	481a      	ldr	r0, [pc, #104]	; (8001944 <MX_GPIO_Init+0xc0>)
 80018dc:	f000 fbff 	bl	80020de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : dis0_0_Pin dis0_1_Pin dis0_2_Pin dis0_3_Pin
                           dis0_4_Pin dis0_5_Pin dis0_6_Pin dis1_0_Pin
                           dis1_1_Pin dis1_2_Pin dis1_3_Pin dis1_4_Pin
                           dis1_5_Pin dis1_6_Pin */
  GPIO_InitStruct.Pin = dis0_0_Pin|dis0_1_Pin|dis0_2_Pin|dis0_3_Pin
 80018e0:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80018e4:	60bb      	str	r3, [r7, #8]
                          |dis0_4_Pin|dis0_5_Pin|dis0_6_Pin|dis1_0_Pin
                          |dis1_1_Pin|dis1_2_Pin|dis1_3_Pin|dis1_4_Pin
                          |dis1_5_Pin|dis1_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2302      	movs	r3, #2
 80018f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4619      	mov	r1, r3
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <MX_GPIO_Init+0xbc>)
 80018fa:	f000 fa5f 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80018fe:	2307      	movs	r3, #7
 8001900:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	4619      	mov	r1, r3
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <MX_GPIO_Init+0xc0>)
 8001912:	f000 fa53 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : traffic1_Pin traffic2_Pin traffic3_Pin traffic4_Pin
                           traffic5_Pin traffic6_Pin red1_Pin yellow1_Pin
                           green1_Pin red2_Pin yellow2_Pin green2_Pin
                           traffic0_Pin */
  GPIO_InitStruct.Pin = traffic1_Pin|traffic2_Pin|traffic3_Pin|traffic4_Pin
 8001916:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800191a:	60bb      	str	r3, [r7, #8]
                          |traffic5_Pin|traffic6_Pin|red1_Pin|yellow1_Pin
                          |green1_Pin|red2_Pin|yellow2_Pin|green2_Pin
                          |traffic0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2302      	movs	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	4619      	mov	r1, r3
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_GPIO_Init+0xc0>)
 8001930:	f000 fa44 	bl	8001dbc <HAL_GPIO_Init>

}
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	40010800 	.word	0x40010800
 8001944:	40010c00 	.word	0x40010c00

08001948 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001958:	d103      	bne.n	8001962 <HAL_TIM_PeriodElapsedCallback+0x1a>
		timer_run();
 800195a:	f7fe fdb9 	bl	80004d0 <timer_run>
		button_reading();
 800195e:	f7fe fccb 	bl	80002f8 <button_reading>
	}
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196e:	b672      	cpsid	i
}
 8001970:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001972:	e7fe      	b.n	8001972 <Error_Handler+0x8>

08001974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_MspInit+0x5c>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <HAL_MspInit+0x5c>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6193      	str	r3, [r2, #24]
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_MspInit+0x5c>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_MspInit+0x5c>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_MspInit+0x5c>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	61d3      	str	r3, [r2, #28]
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_MspInit+0x5c>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_MspInit+0x60>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <HAL_MspInit+0x60>)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40010000 	.word	0x40010000

080019d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e8:	d113      	bne.n	8001a12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_TIM_Base_MspInit+0x44>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <HAL_TIM_Base_MspInit+0x44>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	61d3      	str	r3, [r2, #28]
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_TIM_Base_MspInit+0x44>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	201c      	movs	r0, #28
 8001a08:	f000 f9a1 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a0c:	201c      	movs	r0, #28
 8001a0e:	f000 f9ba 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a66:	f000 f87f 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <TIM2_IRQHandler+0x10>)
 8001a76:	f000 ffdb 	bl	8002a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000094 	.word	0x20000094

08001a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a90:	f7ff fff8 	bl	8001a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a96:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a98:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aac:	4c09      	ldr	r4, [pc, #36]	; (8001ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aba:	f001 fb05 	bl	80030c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001abe:	f7ff fe47 	bl	8001750 <main>
  bx lr
 8001ac2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001acc:	08003164 	.word	0x08003164
  ldr r2, =_sbss
 8001ad0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001ad4:	200000e0 	.word	0x200000e0

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x28>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_Init+0x28>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f923 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	200f      	movs	r0, #15
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff ff3c 	bl	8001974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f93b 	bl	8001da2 <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f903 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000028 	.word	0x20000028
 8001b60:	20000030 	.word	0x20000030
 8001b64:	2000002c 	.word	0x2000002c

08001b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x1c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_IncTick+0x20>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <HAL_IncTick+0x20>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000030 	.word	0x20000030
 8001b88:	200000dc 	.word	0x200000dc

08001b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <HAL_GetTick+0x10>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	200000dc 	.word	0x200000dc

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4906      	ldr	r1, [pc, #24]	; (8001c38 <__NVIC_EnableIRQ+0x34>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff90 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff2d 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff42 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff90 	bl	8001c90 <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5f 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff35 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b08b      	sub	sp, #44	; 0x2c
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dce:	e148      	b.n	8002062 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 8137 	bne.w	800205c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4aa3      	ldr	r2, [pc, #652]	; (8002080 <HAL_GPIO_Init+0x2c4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d05e      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001df8:	4aa1      	ldr	r2, [pc, #644]	; (8002080 <HAL_GPIO_Init+0x2c4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d875      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001dfe:	4aa1      	ldr	r2, [pc, #644]	; (8002084 <HAL_GPIO_Init+0x2c8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d058      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e04:	4a9f      	ldr	r2, [pc, #636]	; (8002084 <HAL_GPIO_Init+0x2c8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d86f      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e0a:	4a9f      	ldr	r2, [pc, #636]	; (8002088 <HAL_GPIO_Init+0x2cc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d052      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e10:	4a9d      	ldr	r2, [pc, #628]	; (8002088 <HAL_GPIO_Init+0x2cc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d869      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e16:	4a9d      	ldr	r2, [pc, #628]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d04c      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e1c:	4a9b      	ldr	r2, [pc, #620]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d863      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e22:	4a9b      	ldr	r2, [pc, #620]	; (8002090 <HAL_GPIO_Init+0x2d4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d046      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e28:	4a99      	ldr	r2, [pc, #612]	; (8002090 <HAL_GPIO_Init+0x2d4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d85d      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e2e:	2b12      	cmp	r3, #18
 8001e30:	d82a      	bhi.n	8001e88 <HAL_GPIO_Init+0xcc>
 8001e32:	2b12      	cmp	r3, #18
 8001e34:	d859      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <HAL_GPIO_Init+0x80>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001eb7 	.word	0x08001eb7
 8001e40:	08001e91 	.word	0x08001e91
 8001e44:	08001ea3 	.word	0x08001ea3
 8001e48:	08001ee5 	.word	0x08001ee5
 8001e4c:	08001eeb 	.word	0x08001eeb
 8001e50:	08001eeb 	.word	0x08001eeb
 8001e54:	08001eeb 	.word	0x08001eeb
 8001e58:	08001eeb 	.word	0x08001eeb
 8001e5c:	08001eeb 	.word	0x08001eeb
 8001e60:	08001eeb 	.word	0x08001eeb
 8001e64:	08001eeb 	.word	0x08001eeb
 8001e68:	08001eeb 	.word	0x08001eeb
 8001e6c:	08001eeb 	.word	0x08001eeb
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001eeb 	.word	0x08001eeb
 8001e78:	08001eeb 	.word	0x08001eeb
 8001e7c:	08001eeb 	.word	0x08001eeb
 8001e80:	08001e99 	.word	0x08001e99
 8001e84:	08001ead 	.word	0x08001ead
 8001e88:	4a82      	ldr	r2, [pc, #520]	; (8002094 <HAL_GPIO_Init+0x2d8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e8e:	e02c      	b.n	8001eea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	623b      	str	r3, [r7, #32]
          break;
 8001e96:	e029      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e024      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e01f      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e01a      	b.n	8001eec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e013      	b.n	8001eec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	611a      	str	r2, [r3, #16]
          break;
 8001ed6:	e009      	b.n	8001eec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	615a      	str	r2, [r3, #20]
          break;
 8001ee2:	e003      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x130>
          break;
 8001eea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2bff      	cmp	r3, #255	; 0xff
 8001ef0:	d801      	bhi.n	8001ef6 <HAL_GPIO_Init+0x13a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	e001      	b.n	8001efa <HAL_GPIO_Init+0x13e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	d802      	bhi.n	8001f08 <HAL_GPIO_Init+0x14c>
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	e002      	b.n	8001f0e <HAL_GPIO_Init+0x152>
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	3b08      	subs	r3, #8
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	210f      	movs	r1, #15
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	6a39      	ldr	r1, [r7, #32]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8090 	beq.w	800205c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f3c:	4b56      	ldr	r3, [pc, #344]	; (8002098 <HAL_GPIO_Init+0x2dc>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a55      	ldr	r2, [pc, #340]	; (8002098 <HAL_GPIO_Init+0x2dc>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_GPIO_Init+0x2dc>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f54:	4a51      	ldr	r2, [pc, #324]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a49      	ldr	r2, [pc, #292]	; (80020a0 <HAL_GPIO_Init+0x2e4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00d      	beq.n	8001f9c <HAL_GPIO_Init+0x1e0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a48      	ldr	r2, [pc, #288]	; (80020a4 <HAL_GPIO_Init+0x2e8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d007      	beq.n	8001f98 <HAL_GPIO_Init+0x1dc>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a47      	ldr	r2, [pc, #284]	; (80020a8 <HAL_GPIO_Init+0x2ec>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_GPIO_Init+0x1d8>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x1e2>
 8001f94:	2303      	movs	r3, #3
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x1e2>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x1e2>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fae:	493b      	ldr	r1, [pc, #236]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fc8:	4b38      	ldr	r3, [pc, #224]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4937      	ldr	r1, [pc, #220]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fd6:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4933      	ldr	r1, [pc, #204]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff0:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	492d      	ldr	r1, [pc, #180]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	4929      	ldr	r1, [pc, #164]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8002008:	4013      	ands	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002018:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	4923      	ldr	r1, [pc, #140]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002026:	4b21      	ldr	r3, [pc, #132]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	491f      	ldr	r1, [pc, #124]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8002030:	4013      	ands	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4919      	ldr	r1, [pc, #100]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	43db      	mvns	r3, r3
 8002056:	4915      	ldr	r1, [pc, #84]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8002058:	4013      	ands	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	3301      	adds	r3, #1
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	f47f aeaf 	bne.w	8001dd0 <HAL_GPIO_Init+0x14>
  }
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	372c      	adds	r7, #44	; 0x2c
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	10320000 	.word	0x10320000
 8002084:	10310000 	.word	0x10310000
 8002088:	10220000 	.word	0x10220000
 800208c:	10210000 	.word	0x10210000
 8002090:	10120000 	.word	0x10120000
 8002094:	10110000 	.word	0x10110000
 8002098:	40021000 	.word	0x40021000
 800209c:	40010000 	.word	0x40010000
 80020a0:	40010800 	.word	0x40010800
 80020a4:	40010c00 	.word	0x40010c00
 80020a8:	40011000 	.word	0x40011000
 80020ac:	40010400 	.word	0x40010400

080020b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e001      	b.n	80020d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	807b      	strh	r3, [r7, #2]
 80020ea:	4613      	mov	r3, r2
 80020ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ee:	787b      	ldrb	r3, [r7, #1]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f4:	887a      	ldrh	r2, [r7, #2]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020fa:	e003      	b.n	8002104 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	041a      	lsls	r2, r3, #16
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	611a      	str	r2, [r3, #16]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr

0800210e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002120:	887a      	ldrh	r2, [r7, #2]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	041a      	lsls	r2, r3, #16
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43d9      	mvns	r1, r3
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	400b      	ands	r3, r1
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e26c      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8087 	beq.w	800226e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002160:	4b92      	ldr	r3, [pc, #584]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b04      	cmp	r3, #4
 800216a:	d00c      	beq.n	8002186 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800216c:	4b8f      	ldr	r3, [pc, #572]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d112      	bne.n	800219e <HAL_RCC_OscConfig+0x5e>
 8002178:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002184:	d10b      	bne.n	800219e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002186:	4b89      	ldr	r3, [pc, #548]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d06c      	beq.n	800226c <HAL_RCC_OscConfig+0x12c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d168      	bne.n	800226c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e246      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x76>
 80021a8:	4b80      	ldr	r3, [pc, #512]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a7f      	ldr	r2, [pc, #508]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	e02e      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x98>
 80021be:	4b7b      	ldr	r3, [pc, #492]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7a      	ldr	r2, [pc, #488]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b78      	ldr	r3, [pc, #480]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a77      	ldr	r2, [pc, #476]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0xbc>
 80021e2:	4b72      	ldr	r3, [pc, #456]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a71      	ldr	r2, [pc, #452]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a6e      	ldr	r2, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0xd4>
 80021fc:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6a      	ldr	r2, [pc, #424]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a67      	ldr	r2, [pc, #412]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fcb6 	bl	8001b8c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff fcb2 	bl	8001b8c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1fa      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0xe4>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fca2 	bl	8001b8c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fc9e 	bl	8001b8c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1e6      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x10c>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d063      	beq.n	8002342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227a:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002286:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b08      	cmp	r3, #8
 8002290:	d11c      	bne.n	80022cc <HAL_RCC_OscConfig+0x18c>
 8002292:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d116      	bne.n	80022cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	4b43      	ldr	r3, [pc, #268]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x176>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e1ba      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4939      	ldr	r1, [pc, #228]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	e03a      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff fc57 	bl	8001b8c <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e2:	f7ff fc53 	bl	8001b8c <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e19b      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4927      	ldr	r1, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_RCC_OscConfig+0x270>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7ff fc36 	bl	8001b8c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7ff fc32 	bl	8001b8c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e17a      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d03a      	beq.n	80023c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d019      	beq.n	800238a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <HAL_RCC_OscConfig+0x274>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235c:	f7ff fc16 	bl	8001b8c <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7ff fc12 	bl	8001b8c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e15a      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_RCC_OscConfig+0x26c>)
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002382:	2001      	movs	r0, #1
 8002384:	f000 fa9a 	bl	80028bc <RCC_Delay>
 8002388:	e01c      	b.n	80023c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_RCC_OscConfig+0x274>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7ff fbfc 	bl	8001b8c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002396:	e00f      	b.n	80023b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002398:	f7ff fbf8 	bl	8001b8c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d908      	bls.n	80023b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e140      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	42420000 	.word	0x42420000
 80023b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	4b9e      	ldr	r3, [pc, #632]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e9      	bne.n	8002398 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a6 	beq.w	800251e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b97      	ldr	r3, [pc, #604]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b94      	ldr	r3, [pc, #592]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a93      	ldr	r2, [pc, #588]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	61d3      	str	r3, [r2, #28]
 80023ee:	4b91      	ldr	r3, [pc, #580]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fe:	4b8e      	ldr	r3, [pc, #568]	; (8002638 <HAL_RCC_OscConfig+0x4f8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d118      	bne.n	800243c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240a:	4b8b      	ldr	r3, [pc, #556]	; (8002638 <HAL_RCC_OscConfig+0x4f8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a8a      	ldr	r2, [pc, #552]	; (8002638 <HAL_RCC_OscConfig+0x4f8>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002416:	f7ff fbb9 	bl	8001b8c <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7ff fbb5 	bl	8001b8c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	; 0x64
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0fd      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	4b81      	ldr	r3, [pc, #516]	; (8002638 <HAL_RCC_OscConfig+0x4f8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x312>
 8002444:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a7a      	ldr	r2, [pc, #488]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	e02d      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x334>
 800245a:	4b76      	ldr	r3, [pc, #472]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a75      	ldr	r2, [pc, #468]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	4b73      	ldr	r3, [pc, #460]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a72      	ldr	r2, [pc, #456]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	6213      	str	r3, [r2, #32]
 8002472:	e01c      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d10c      	bne.n	8002496 <HAL_RCC_OscConfig+0x356>
 800247c:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a6c      	ldr	r2, [pc, #432]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	4b6a      	ldr	r3, [pc, #424]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a69      	ldr	r2, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	e00b      	b.n	80024ae <HAL_RCC_OscConfig+0x36e>
 8002496:	4b67      	ldr	r3, [pc, #412]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a66      	ldr	r2, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	4b64      	ldr	r3, [pc, #400]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a63      	ldr	r2, [pc, #396]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d015      	beq.n	80024e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7ff fb69 	bl	8001b8c <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7ff fb65 	bl	8001b8c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0ab      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	4b57      	ldr	r3, [pc, #348]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ee      	beq.n	80024be <HAL_RCC_OscConfig+0x37e>
 80024e0:	e014      	b.n	800250c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7ff fb53 	bl	8001b8c <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7ff fb4f 	bl	8001b8c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e095      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ee      	bne.n	80024ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b48      	ldr	r3, [pc, #288]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a47      	ldr	r2, [pc, #284]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8081 	beq.w	800262a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002528:	4b42      	ldr	r3, [pc, #264]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d061      	beq.n	80025f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d146      	bne.n	80025ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCC_OscConfig+0x4fc>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7ff fb23 	bl	8001b8c <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254a:	f7ff fb1f 	bl	8001b8c <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e067      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255c:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002570:	d108      	bne.n	8002584 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	492d      	ldr	r1, [pc, #180]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a19      	ldr	r1, [r3, #32]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	430b      	orrs	r3, r1
 8002596:	4927      	ldr	r1, [pc, #156]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <HAL_RCC_OscConfig+0x4fc>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7ff faf3 	bl	8001b8c <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7ff faef 	bl	8001b8c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e037      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x46a>
 80025c8:	e02f      	b.n	800262a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_RCC_OscConfig+0x4fc>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fadc 	bl	8001b8c <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7ff fad8 	bl	8001b8c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e020      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x498>
 80025f6:	e018      	b.n	800262a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e013      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	429a      	cmp	r2, r3
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
 800263c:	42420060 	.word	0x42420060

08002640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0d0      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b6a      	ldr	r3, [pc, #424]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d910      	bls.n	8002684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b67      	ldr	r3, [pc, #412]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 0207 	bic.w	r2, r3, #7
 800266a:	4965      	ldr	r1, [pc, #404]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0b8      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800269c:	4b59      	ldr	r3, [pc, #356]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a58      	ldr	r2, [pc, #352]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b4:	4b53      	ldr	r3, [pc, #332]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b50      	ldr	r3, [pc, #320]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	494d      	ldr	r1, [pc, #308]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d040      	beq.n	8002760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d115      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e07f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e073      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06b      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b39      	ldr	r3, [pc, #228]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4936      	ldr	r1, [pc, #216]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002730:	f7ff fa2c 	bl	8001b8c <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7ff fa28 	bl	8001b8c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e053      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d210      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	4922      	ldr	r1, [pc, #136]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e032      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4916      	ldr	r1, [pc, #88]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	490e      	ldr	r1, [pc, #56]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ce:	f000 f821 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 80027d2:	4602      	mov	r2, r0
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	490a      	ldr	r1, [pc, #40]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027e0:	5ccb      	ldrb	r3, [r1, r3]
 80027e2:	fa22 f303 	lsr.w	r3, r2, r3
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x1cc>)
 80027e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_RCC_ClockConfig+0x1d0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f98a 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40022000 	.word	0x40022000
 8002804:	40021000 	.word	0x40021000
 8002808:	08003138 	.word	0x08003138
 800280c:	20000028 	.word	0x20000028
 8002810:	2000002c 	.word	0x2000002c

08002814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d002      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x30>
 800283e:	2b08      	cmp	r3, #8
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x36>
 8002842:	e027      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002846:	613b      	str	r3, [r7, #16]
      break;
 8002848:	e027      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	0c9b      	lsrs	r3, r3, #18
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d010      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	0c5b      	lsrs	r3, r3, #17
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800286e:	5cd3      	ldrb	r3, [r2, r3]
 8002870:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002876:	fb02 f203 	mul.w	r2, r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e004      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	613b      	str	r3, [r7, #16]
      break;
 8002892:	e002      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002896:	613b      	str	r3, [r7, #16]
      break;
 8002898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289a:	693b      	ldr	r3, [r7, #16]
}
 800289c:	4618      	mov	r0, r3
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000
 80028ac:	007a1200 	.word	0x007a1200
 80028b0:	08003148 	.word	0x08003148
 80028b4:	08003158 	.word	0x08003158
 80028b8:	003d0900 	.word	0x003d0900

080028bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <RCC_Delay+0x34>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <RCC_Delay+0x38>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	0a5b      	lsrs	r3, r3, #9
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028d8:	bf00      	nop
  }
  while (Delay --);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e5a      	subs	r2, r3, #1
 80028de:	60fa      	str	r2, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f9      	bne.n	80028d8 <RCC_Delay+0x1c>
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	20000028 	.word	0x20000028
 80028f4:	10624dd3 	.word	0x10624dd3

080028f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e041      	b.n	800298e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff f85a 	bl	80019d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f000 fa6e 	bl	8002e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d001      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e035      	b.n	8002a1c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_TIM_Base_Start_IT+0x90>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_TIM_Base_Start_IT+0x4e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029da:	d004      	beq.n	80029e6 <HAL_TIM_Base_Start_IT+0x4e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_TIM_Base_Start_IT+0x94>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d111      	bne.n	8002a0a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d010      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	e007      	b.n	8002a1a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40000400 	.word	0x40000400

08002a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d122      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d11b      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0202 	mvn.w	r2, #2
 8002a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f9b4 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
 8002a78:	e005      	b.n	8002a86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f9a7 	bl	8002dce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f9b6 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d122      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d11b      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0204 	mvn.w	r2, #4
 8002ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f98a 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
 8002acc:	e005      	b.n	8002ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f97d 	bl	8002dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f98c 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d122      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d11b      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0208 	mvn.w	r2, #8
 8002b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f960 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
 8002b20:	e005      	b.n	8002b2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f953 	bl	8002dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f962 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d122      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d11b      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0210 	mvn.w	r2, #16
 8002b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f936 	bl	8002de0 <HAL_TIM_IC_CaptureCallback>
 8002b74:	e005      	b.n	8002b82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f929 	bl	8002dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f938 	bl	8002df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10e      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d107      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0201 	mvn.w	r2, #1
 8002bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe feca 	bl	8001948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	2b80      	cmp	r3, #128	; 0x80
 8002bc0:	d10e      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	d107      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa6b 	bl	80030b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d10e      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d107      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f8fc 	bl	8002e04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d10e      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d107      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0220 	mvn.w	r2, #32
 8002c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fa36 	bl	80030a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_TIM_ConfigClockSource+0x1c>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e0b4      	b.n	8002dc6 <HAL_TIM_ConfigClockSource+0x186>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c94:	d03e      	beq.n	8002d14 <HAL_TIM_ConfigClockSource+0xd4>
 8002c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9a:	f200 8087 	bhi.w	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca2:	f000 8086 	beq.w	8002db2 <HAL_TIM_ConfigClockSource+0x172>
 8002ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002caa:	d87f      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cac:	2b70      	cmp	r3, #112	; 0x70
 8002cae:	d01a      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0xa6>
 8002cb0:	2b70      	cmp	r3, #112	; 0x70
 8002cb2:	d87b      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	2b60      	cmp	r3, #96	; 0x60
 8002cb6:	d050      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x11a>
 8002cb8:	2b60      	cmp	r3, #96	; 0x60
 8002cba:	d877      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cbc:	2b50      	cmp	r3, #80	; 0x50
 8002cbe:	d03c      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0xfa>
 8002cc0:	2b50      	cmp	r3, #80	; 0x50
 8002cc2:	d873      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	d058      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0x13a>
 8002cc8:	2b40      	cmp	r3, #64	; 0x40
 8002cca:	d86f      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002ccc:	2b30      	cmp	r3, #48	; 0x30
 8002cce:	d064      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x15a>
 8002cd0:	2b30      	cmp	r3, #48	; 0x30
 8002cd2:	d86b      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d060      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x15a>
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d867      	bhi.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d05c      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x15a>
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d05a      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x15a>
 8002ce4:	e062      	b.n	8002dac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6899      	ldr	r1, [r3, #8]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f000 f95e 	bl	8002fb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	609a      	str	r2, [r3, #8]
      break;
 8002d12:	e04f      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6899      	ldr	r1, [r3, #8]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f000 f947 	bl	8002fb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d36:	609a      	str	r2, [r3, #8]
      break;
 8002d38:	e03c      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	461a      	mov	r2, r3
 8002d48:	f000 f8be 	bl	8002ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2150      	movs	r1, #80	; 0x50
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 f915 	bl	8002f82 <TIM_ITRx_SetConfig>
      break;
 8002d58:	e02c      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f000 f8dc 	bl	8002f24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2160      	movs	r1, #96	; 0x60
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f905 	bl	8002f82 <TIM_ITRx_SetConfig>
      break;
 8002d78:	e01c      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f000 f89e 	bl	8002ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2140      	movs	r1, #64	; 0x40
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f8f5 	bl	8002f82 <TIM_ITRx_SetConfig>
      break;
 8002d98:	e00c      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4619      	mov	r1, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f000 f8ec 	bl	8002f82 <TIM_ITRx_SetConfig>
      break;
 8002daa:	e003      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      break;
 8002db0:	e000      	b.n	8002db4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
	...

08002e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <TIM_Base_SetConfig+0xa8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <TIM_Base_SetConfig+0x28>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e36:	d003      	beq.n	8002e40 <TIM_Base_SetConfig+0x28>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a22      	ldr	r2, [pc, #136]	; (8002ec4 <TIM_Base_SetConfig+0xac>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d108      	bne.n	8002e52 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a1a      	ldr	r2, [pc, #104]	; (8002ec0 <TIM_Base_SetConfig+0xa8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d007      	beq.n	8002e6a <TIM_Base_SetConfig+0x52>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e60:	d003      	beq.n	8002e6a <TIM_Base_SetConfig+0x52>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <TIM_Base_SetConfig+0xac>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d108      	bne.n	8002e7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <TIM_Base_SetConfig+0xa8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d103      	bne.n	8002eb0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	615a      	str	r2, [r3, #20]
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40000400 	.word	0x40000400

08002ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f023 0201 	bic.w	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f023 030a 	bic.w	r3, r3, #10
 8002f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f023 0210 	bic.w	r2, r3, #16
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	031b      	lsls	r3, r3, #12
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	621a      	str	r2, [r3, #32]
}
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b085      	sub	sp, #20
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f043 0307 	orr.w	r3, r3, #7
 8002fa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b087      	sub	sp, #28
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	021a      	lsls	r2, r3, #8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	609a      	str	r2, [r3, #8]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003008:	2302      	movs	r3, #2
 800300a:	e041      	b.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a14      	ldr	r2, [pc, #80]	; (800309c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003058:	d004      	beq.n	8003064 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d10c      	bne.n	800307e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800306a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	4313      	orrs	r3, r2
 8003074:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40000400 	.word	0x40000400

080030a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <__libc_init_array>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	2600      	movs	r6, #0
 80030cc:	4d0c      	ldr	r5, [pc, #48]	; (8003100 <__libc_init_array+0x38>)
 80030ce:	4c0d      	ldr	r4, [pc, #52]	; (8003104 <__libc_init_array+0x3c>)
 80030d0:	1b64      	subs	r4, r4, r5
 80030d2:	10a4      	asrs	r4, r4, #2
 80030d4:	42a6      	cmp	r6, r4
 80030d6:	d109      	bne.n	80030ec <__libc_init_array+0x24>
 80030d8:	f000 f822 	bl	8003120 <_init>
 80030dc:	2600      	movs	r6, #0
 80030de:	4d0a      	ldr	r5, [pc, #40]	; (8003108 <__libc_init_array+0x40>)
 80030e0:	4c0a      	ldr	r4, [pc, #40]	; (800310c <__libc_init_array+0x44>)
 80030e2:	1b64      	subs	r4, r4, r5
 80030e4:	10a4      	asrs	r4, r4, #2
 80030e6:	42a6      	cmp	r6, r4
 80030e8:	d105      	bne.n	80030f6 <__libc_init_array+0x2e>
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f0:	4798      	blx	r3
 80030f2:	3601      	adds	r6, #1
 80030f4:	e7ee      	b.n	80030d4 <__libc_init_array+0xc>
 80030f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fa:	4798      	blx	r3
 80030fc:	3601      	adds	r6, #1
 80030fe:	e7f2      	b.n	80030e6 <__libc_init_array+0x1e>
 8003100:	0800315c 	.word	0x0800315c
 8003104:	0800315c 	.word	0x0800315c
 8003108:	0800315c 	.word	0x0800315c
 800310c:	08003160 	.word	0x08003160

08003110 <memset>:
 8003110:	4603      	mov	r3, r0
 8003112:	4402      	add	r2, r0
 8003114:	4293      	cmp	r3, r2
 8003116:	d100      	bne.n	800311a <memset+0xa>
 8003118:	4770      	bx	lr
 800311a:	f803 1b01 	strb.w	r1, [r3], #1
 800311e:	e7f9      	b.n	8003114 <memset+0x4>

08003120 <_init>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	bf00      	nop
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr

0800312c <_fini>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	bf00      	nop
 8003130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003132:	bc08      	pop	{r3}
 8003134:	469e      	mov	lr, r3
 8003136:	4770      	bx	lr
